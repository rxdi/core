{"version":3,"sources":["helpers/sha256.ts","helpers/create-unique-hash.ts","container/error/MissingProvidedServiceTypeError.ts","container/Token.ts","container/error/ServiceNotFoundError.ts","services/constructor-watcher/constructor-watcher.ts","services/constructor-watcher/index.ts","container/ContainerInstance.ts","container/Container.ts","helpers/reflect.decorator.ts","decorators/service/Service.ts","container/types/hooks/index.ts","container/index.ts","services/cache/cache-layer.ts","helpers/events.ts","services/config/config.model.ts","services/config/config.service.ts","services/config/index.ts","decorators/injector/injector.decorator.ts","services/bootstrap-logger/bootstrap-logger.ts","services/bootstrap-logger/index.ts","services/cache/cache-layer.service.ts","services/cache/cache-layer.interfaces.ts","services/cache/index.ts","services/plugin/plugin.service.ts","services/exit-handler/exit-handler.service.ts","services/exit-handler/index.ts","services/request/request.cache.service.ts","services/request/request.service.ts","services/request/index.ts","services/file/dist.ts","services/file/file.service.ts","services/file/index.ts","services/compression/compression.service.ts","services/npm-service/npm.service.ts","services/external-importer/providers.ts","services/external-importer/external-importer.ts","services/external-importer/external-importer-config.ts","services/external-importer/index.ts","services/lazy-factory/lazy-factory.service.ts","services/module/helpers/validators.ts","services/controllers/controllers.service.ts","services/effect/effect.service.ts","services/components/components.service.ts","services/bootstraps/bootstraps.service.ts","services/services/services.service.ts","services/module/module.service.ts","services/module/index.ts","services/resolver/resolver.service.ts","services/resolver/index.ts","services/after-starter/after-starter.service.ts","helpers/log.ts","services/bootstrap/bootstrap.service.ts","helpers/exit-handler.ts","helpers/bootstrap.ts","helpers/index.ts","services/metadata/metadata.service.ts","services/metadata/index.ts","services/compression/index.ts","services/effect/index.ts","services/controllers/index.ts","services/components/index.ts","services/bootstraps/index.ts","services/services/index.ts","services/plugin-manager/plugin-manager.ts","services/index.ts","helpers/generic-constructor.ts","decorators/module/module.decorator.ts","decorators/module/index.ts","decorators/injector/index.ts","decorators/inject-soft/inject-soft.decorator.ts","decorators/inject-soft/index.ts","container/error/CannotInjectError.ts","helpers/get-identifier.ts","decorators/inject/Inject.ts","decorators/controller/controller.decorator.ts","decorators/controller/index.ts","decorators/effect/effect.decorator.ts","decorators/effect/index.ts","decorators/plugin/Plugin.ts","decorators/component/component.decorator.ts","decorators/component/index.ts","decorators/inject-many/InjectMany.ts","decorators/index.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["\nexport class Sha256 {\n\n    /**\n     * Generates SHA-256 hash of string.\n     *\n     * @param   {string} msg - (Unicode) string to be hashed.\n     * @param   {Object} [options]\n     * @param   {string} [options.msgFormat=string] - Message format: 'string' for JavaScript string\n     *   (gets converted to UTF-8 for hashing); 'hex-bytes' for string of hex bytes ('616263' ≡ 'abc') .\n     * @param   {string} [options.outFormat=hex] - Output format: 'hex' for string of contiguous\n     *   hex bytes; 'hex-w' for grouping hex bytes into groups of (4 byte / 8 character) words.\n     * @returns {string} Hash of msg as hex character string.\n     */\n    hash(msg, options?) {\n        const defaults = { msgFormat: 'string', outFormat: 'hex' };\n        const opt = Object.assign(defaults, options);\n\n        // note use throughout this routine of 'n >>> 0' to coerce Number 'n' to unsigned 32-bit integer\n        msg = utf8Encode(msg);\n        switch (opt.msgFormat) {\n            default: // default is to convert string to UTF-8, as SHA only deals with byte-streams\n            case 'string': msg = utf8Encode(msg); break;\n            case 'hex-bytes': msg = hexBytesToString(msg); break; // mostly for running tests\n        }\n\n        // constants [§4.2.2]\n        const K = [\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n        // initial hash value [§5.3.3]\n        const H = <any>[\n            0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n        // PREPROCESSING [§6.2.1]\n\n        msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n        // convert string msg into 512-bit blocks (array of 16 32-bit integers) [§5.2.1]\n        const l = msg.length / 4 + 2; // length (in 32-bit integers) of msg + ‘1’ + appended length\n        const N = Math.ceil(l / 16);  // number of 16-integer (512-bit) blocks required to hold 'l' ints\n        const M = new Array(N);     // message M is N×16 array of 32-bit integers\n\n        for (let i = 0; i < N; i++) {\n            M[i] = new Array(16);\n            for (let j = 0; j < 16; j++) { // encode 4 chars per integer (64 per block), big-endian encoding\n                M[i][j] = (msg.charCodeAt(i * 64 + j * 4 + 0) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16)\n                    | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3) << 0);\n            } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n        }\n        // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n        // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n        // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n        const lenHi = ((msg.length - 1) * 8) / Math.pow(2, 32);\n        const lenLo = ((msg.length - 1) * 8) >>> 0;\n        M[N - 1][14] = Math.floor(lenHi);\n        M[N - 1][15] = lenLo;\n\n\n        // HASH COMPUTATION [§6.2.2]\n\n        for (let i = 0; i < N; i++) {\n            const W = new Array(64);\n\n            // 1 - prepare message schedule 'W'\n            for (let t = 0; t < 16; t++) W[t] = M[i][t];\n            for (let t = 16; t < 64; t++) {\n                W[t] = (this.σ1(W[t - 2]) + W[t - 7] + this.σ0(W[t - 15]) + W[t - 16]) >>> 0;\n            }\n\n            // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n            let a = H[0], b = H[1], c = H[2], d = H[3], e = H[4], f = H[5], g = H[6], h = H[7];\n\n            // 3 - main loop (note '>>> 0' for 'addition modulo 2^32')\n            for (let t = 0; t < 64; t++) {\n                const T1 = h + this.Σ1(e) + this.Ch(e, f, g) + K[t] + W[t];\n                const T2 = this.Σ0(a) + this.Maj(a, b, c);\n                h = g;\n                g = f;\n                f = e;\n                e = (d + T1) >>> 0;\n                d = c;\n                c = b;\n                b = a;\n                a = (T1 + T2) >>> 0;\n            }\n\n            // 4 - compute the new intermediate hash value (note '>>> 0' for 'addition modulo 2^32')\n            H[0] = (H[0] + a) >>> 0;\n            H[1] = (H[1] + b) >>> 0;\n            H[2] = (H[2] + c) >>> 0;\n            H[3] = (H[3] + d) >>> 0;\n            H[4] = (H[4] + e) >>> 0;\n            H[5] = (H[5] + f) >>> 0;\n            H[6] = (H[6] + g) >>> 0;\n            H[7] = (H[7] + h) >>> 0;\n        }\n\n        // convert H0..H7 to hex strings (with leading zeros)\n        for (let h = 0; h < H.length; h++) H[h] = ('00000000' + H[h].toString(16)).slice(-8);\n\n        // concatenate H0..H7, with separator if required\n        const separator = opt.outFormat == 'hex-w' ? ' ' : '';\n\n        return H.join(separator);\n\n        /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n        function utf8Encode(str) {\n            try {\n                return new TextEncoder().encode(str).reduce((prev, curr) => prev + String.fromCharCode(curr), '');\n            } catch (e) { // no TextEncoder available?\n                return unescape(encodeURIComponent(str)); // monsur.hossa.in/2012/07/20/utf-8-in-javascript.html\n            }\n        }\n\n        function hexBytesToString(hexStr) { // convert string of hex numbers to a string of chars (eg '616263' -> 'abc').\n            const str = hexStr.replace(' ', ''); // allow space-separated groups\n            return str == '' ? '' : str.match(/.{2}/g).map(byte => String.fromCharCode(parseInt(byte, 16))).join('');\n        }\n    }\n    /**\n     * Rotates right (circular right shift) value x by n positions [§3.2.4].\n     * @private\n     */\n    ROTR(n, x) {\n        return (x >>> n) | (x << (32 - n));\n    }\n    /**\n     * Logical functions [§4.1.2].\n     * @private\n     */\n    Σ0(x) { return this.ROTR(2, x) ^ this.ROTR(13, x) ^ this.ROTR(22, x); }\n    Σ1(x) { return this.ROTR(6, x) ^ this.ROTR(11, x) ^ this.ROTR(25, x); }\n    σ0(x) { return this.ROTR(7, x) ^ this.ROTR(18, x) ^ (x >>> 3); }\n    σ1(x) { return this.ROTR(17, x) ^ this.ROTR(19, x) ^ (x >>> 10); }\n    Ch(x, y, z) { return (x & y) ^ (~x & z); }          // 'choice'\n    Maj(x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } // 'majority'\n}\n\n\nexport const sha256 = new Sha256();","import { sha256 } from './sha256';\nexport function createUniqueHash(key) {\n  return sha256.hash(key);\n}\n","/**\n * Thrown when service is registered without type.\n */\nexport class MissingProvidedServiceTypeError extends Error {\n  name = 'ServiceNotFoundError';\n\n  constructor(identifier: any) {\n    super(\n      `Cannot determine a class of the requesting service '${JSON.stringify(\n        identifier\n      )}'`\n    );\n    Object.setPrototypeOf(this, MissingProvidedServiceTypeError.prototype);\n  }\n}\n","/**\n * Used to create unique typed service identifier.\n * Useful when service has only interface, but don't have a class.\n */\nexport class Token<T> {\n\n    /**\n     * @param name Token name, optional and only used for debugging purposes.\n     */\n    constructor(public name?: string) {\n    }\n\n}\n\nexport class InjectionToken<T> extends Token<T> {}","import { ServiceIdentifier } from '../types/ServiceIdentifier';\nimport { Token } from '../Token';\n\n/**\n * Thrown when requested service was not found.\n */\nexport class ServiceNotFoundError extends Error {\n  name = 'ServiceNotFoundError';\n\n  constructor(identifier: ServiceIdentifier) {\n    super();\n\n    if (typeof identifier === 'string') {\n      this.message =\n        `Service '${identifier}' was not found, looks like it was not registered in the container. ` +\n        `Register it by calling Container.set('${JSON.stringify(\n          identifier\n        )}', ...) before using service.`;\n    } else if (identifier instanceof Token && identifier.name) {\n      this.message =\n        `Service '${\n          identifier.name\n        }' was not found, looks like it was not registered in the container. ` +\n        `Register it by calling Container.set before using service.`;\n    } else if (identifier instanceof Token) {\n      this.message =\n        `Service with a given token was not found, looks like it was not registered in the container. ` +\n        `Register it by calling Container.set before using service.`;\n    }\n\n    Object.setPrototypeOf(this, ServiceNotFoundError.prototype);\n  }\n}\n","export class ConstructorWatcherService {\n  _constructors: Map<string, Function> = new Map();\n\n  getConstructor(name: string) {\n    return this._constructors.get(name);\n  }\n\n  getByClass<T>(currentClass: Function): T {\n    return this._constructors.get(currentClass.name)['value'];\n  }\n\n  createConstructor(name: string, value) {\n    if (this._constructors.has(name)) {\n      return this.getConstructor(name);\n    }\n\n    this._constructors.set(name, value);\n    return this.getConstructor(name);\n  }\n\n  triggerOnInit(currentClass: Function) {\n    const currentConstructor = this._constructors.get(currentClass.name);\n    if (currentConstructor['value'] && currentConstructor['value'].OnInit) {\n      currentConstructor['value'].OnInit.bind(currentConstructor['value'])();\n    }\n  }\n}\n\nexport const constructorWatcherService = new ConstructorWatcherService();\n","export * from './constructor-watcher';","import { Container } from './Container';\nimport { MissingProvidedServiceTypeError } from './error/MissingProvidedServiceTypeError';\nimport { ServiceNotFoundError } from './error/ServiceNotFoundError';\nimport { Token } from './Token';\nimport { ObjectType } from './types/ObjectType';\nimport { ServiceIdentifier } from './types/ServiceIdentifier';\nimport { ServiceMetadata } from './types/ServiceMetadata';\nimport { constructorWatcherService } from '../services/constructor-watcher';\n\n/**\n * TypeDI can have multiple containers.\n * One container is ContainerInstance.\n */\nexport class ContainerInstance {\n  // -------------------------------------------------------------------------\n  // Public Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Container instance id.\n   */\n  id: any;\n\n  // -------------------------------------------------------------------------\n  // Private Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * All registered services.\n   */\n  private services: Map<\n    ServiceMetadata<any, any>,\n    ServiceMetadata<any, any>\n  > = new Map();\n\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(id: any) {\n    this.id = id;\n  }\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Checks if the service with given name or type is registered service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  has<T>(type: ObjectType<T>): boolean;\n\n  /**\n   * Checks if the service with given name or type is registered service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  has<T>(id: string): boolean;\n\n  /**\n   * Checks if the service with given name or type is registered service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  has<T>(id: Token<T>): boolean;\n\n  /**\n   * Checks if the service with given name or type is registered service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  has<T>(identifier: ServiceIdentifier): boolean {\n    return !!this.findService(identifier);\n  }\n\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  get<T>(type: ObjectType<T>): T;\n\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  get<T>(id: string): T;\n\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  get<T>(id: Token<T>): T;\n\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  get<T>(id: { service: T }): T;\n\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  get<T>(identifier: ServiceIdentifier<T>): T {\n    const globalContainer = Container.of(undefined);\n    const service = globalContainer.findService(identifier);\n    const scopedService = this.findService(identifier);\n\n    if (service && service.global === true) {\n        return this.getServiceValue(identifier, service);\n    }\n\n    if (scopedService) {\n        return this.getServiceValue(identifier, scopedService);\n    }\n\n    if (service && this !== globalContainer) {\n      const clonedService = Object.assign({}, service);\n      clonedService.value = undefined;\n      const value = this.getServiceValue(identifier, clonedService);\n      this.set(identifier, value);\n      return value;\n    }\n\n    return this.getServiceValue(identifier, service);\n  }\n\n  /**\n   * Gets all instances registered in the container of the given service identifier.\n   * Used when service defined with multiple: true flag.\n   */\n  getMany<T>(id: string): T[];\n\n  /**\n   * Gets all instances registered in the container of the given service identifier.\n   * Used when service defined with multiple: true flag.\n   */\n  getMany<T>(id: Token<T>): T[];\n\n  /**\n   * Gets all instances registered in the container of the given service identifier.\n   * Used when service defined with multiple: true flag.\n   */\n  getMany<T>(id: string | Token<T>): T[] {\n    return this.filterServices(id).map(service =>\n      this.getServiceValue(id, service)\n    );\n  }\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  set<T, K extends keyof T>(service: ServiceMetadata<T, K>): this;\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  set(type: Function, value: any): this;\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  set(name: string, value: any): this;\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  set(token: Token<any>, value: any): this;\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  set(token: ServiceIdentifier, value: any): this;\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  set<T, K extends keyof T>(values: ServiceMetadata<T, K>[]): this;\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  set(\n    identifierOrServiceMetadata:\n      | ServiceIdentifier\n      | ServiceMetadata<any, any>\n      | (ServiceMetadata<any, any>[]),\n    value?: any\n  ): this {\n    if (identifierOrServiceMetadata instanceof Array) {\n      identifierOrServiceMetadata.forEach((v: any) => this.set(v));\n      return this;\n    }\n    if (\n      typeof identifierOrServiceMetadata === 'string' ||\n      identifierOrServiceMetadata instanceof Token\n    ) {\n      return this.set({ id: identifierOrServiceMetadata, value: value });\n    }\n    if (\n      typeof identifierOrServiceMetadata === 'object' &&\n      (identifierOrServiceMetadata as { service: Token<any> }).service\n    ) {\n      return this.set({\n        id: (identifierOrServiceMetadata as { service: Token<any> }).service,\n        value: value\n      });\n    }\n    if (identifierOrServiceMetadata instanceof Function) {\n      return this.set({\n        type: identifierOrServiceMetadata,\n        id: identifierOrServiceMetadata,\n        value: value\n      });\n    }\n\n    // const newService: ServiceMetadata<any, any> = arguments.length === 1 && typeof identifierOrServiceMetadata === 'object'  && !(identifierOrServiceMetadata instanceof Token) ? identifierOrServiceMetadata : undefined;\n    const newService: ServiceMetadata<\n      any,\n      any\n    > = identifierOrServiceMetadata as any;\n    const service = this.services.get(newService);\n    if (service && service.multiple !== true) {\n      Object.assign(service, newService);\n    } else {\n      this.services.set(newService, newService);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes services with a given service identifiers (tokens or types).\n   */\n  remove(...ids: ServiceIdentifier[]): this {\n    ids.forEach(id => {\n      this.filterServices(id).forEach(service => {\n        this.services.delete(service);\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Completely resets the container by removing all previously registered services from it.\n   */\n  reset(): this {\n    this.services.clear();\n    return this;\n  }\n\n  // -------------------------------------------------------------------------\n  // Private Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Filters registered service in the with a given service identifier.\n   */\n  private filterServices(\n    identifier: ServiceIdentifier\n  ): ServiceMetadata<any, any>[] {\n    return Array.from(this.services.values()).filter(service => {\n      if (service.id) {\n        return service.id === identifier;\n      }\n\n      if (service.type && identifier instanceof Function) {\n        return (\n            service.type === identifier ||\n            identifier.prototype instanceof service.type\n          );\n      }\n      return false;\n    });\n  }\n\n  /**\n   * Finds registered service in the with a given service identifier.\n   */\n  private findService(\n    identifier: ServiceIdentifier\n  ): ServiceMetadata<any, any> | undefined {\n    return Array.from(this.services.values()).find(service => {\n      if (service.id) {\n        if (\n          identifier instanceof Object &&\n          service.id instanceof Token &&\n          (identifier as any).service instanceof Token\n        ) {\n          return service.id === (identifier as any).service;\n        }\n\n        return service.id === identifier;\n      }\n\n      if (service.type && identifier instanceof Function) {\n        return service.type === identifier; // todo: not sure why it was here || identifier.prototype instanceof service.type;\n      }\n      return false;\n    });\n  }\n\n  /**\n   * Gets service value.\n   */\n  private getServiceValue(\n    identifier: ServiceIdentifier,\n    service: ServiceMetadata<any, any> | undefined\n  ): any {\n    // find if instance of this object already initialized in the container and return it if it is\n    if (service && service.value !== undefined) {\n        return service.value;\n    }\n\n    // if named service was requested and its instance was not found plus there is not type to know what to initialize,\n    // this means service was not pre-registered and we throw an exception\n    if (\n      (!service || !service.type) &&\n      (!service || !service.factory) &&\n      (typeof identifier === 'string' || identifier instanceof Token)\n    ) {\n        throw new ServiceNotFoundError(identifier);\n    }\n\n    // at this point we either have type in service registered, either identifier is a target type\n    let type = undefined;\n    if (service && service.type) {\n      type = service.type;\n    } else if (service && service.id instanceof Function) {\n      type = service.id;\n    } else if (identifier instanceof Function) {\n      type = identifier;\n\n      // } else if (identifier instanceof Object && (identifier as { service: Token<any> }).service instanceof Token) {\n      //     type = (identifier as { service: Token<any> }).service;\n    }\n\n    // if service was not found then create a new one and register it\n    if (!service) {\n      if (!type) {\n        throw new MissingProvidedServiceTypeError(identifier);\n      }\n      service = { type: type };\n      this.services.set(service, service);\n    }\n\n    // setup constructor parameters for a newly initialized service\n    const paramTypes =\n      type && Reflect && (Reflect as any).getMetadata\n        ? (Reflect as any).getMetadata('design:paramtypes', type)\n        : undefined;\n    let params: any[] = paramTypes\n      ? this.initializeParams(type, paramTypes)\n      : [];\n\n    // if factory is set then use it to create service instance\n    let value: any;\n    if (service.factory) {\n      // filter out non-service parameters from created service constructor\n      // non-service parameters can be, lets say Car(name: string, isNew: boolean, engine: Engine)\n      // where name and isNew are non-service parameters and engine is a service parameter\n      params = params.filter(param => param !== undefined);\n\n      if (service.factory instanceof Array) {\n        // use special [Type, 'create'] syntax to allow factory services\n        // in this case Type instance will be obtained from Container and its method 'create' will be called\n        value = (this.get(service.factory[0]) as any)[service.factory[1]](\n          ...params\n        );\n      } else {\n        // regular factory function\n        value = service.factory(...params, this);\n      }\n    } else {\n      // otherwise simply create a new object instance\n      if (!type) {\n        throw new MissingProvidedServiceTypeError(identifier);\n      }\n\n      params.unshift(null);\n\n      // 'extra feature' - always pass container instance as the last argument to the service function\n      // this allows us to support javascript where we don't have decorators and emitted metadata about dependencies\n      // need to be injected, and user can use provided container to get instances he needs\n      params.push(this);\n\n      if (type.prototype.OnBefore) {\n        type.prototype.OnBefore.bind(type)();\n      }\n      value = new (type.bind.apply(type, params))();\n      constructorWatcherService.createConstructor(type['name'], {\n        type,\n        value\n      });\n      // if (value.render) {\n      //     debugger\n      // //    const test = new value['__proto__'].constructor()\n      // Extend React class Correctly\n      //    Object.assign(value['__proto__'].constructor.prototype, value);\n      //    console.log(value['__proto__'].constructor.prototype);\n      //     console.log(type['metadata']['moduleName'], value);\n      //     console.log(value['__proto__'].constructor)\n      // }\n\n      if (value.OnInit) {\n        value.OnInit.bind(value)();\n      }\n    }\n\n    if (service && !service.transient && value) {\n        service.value = value;\n    }\n\n    if (type) {\n        this.applyPropertyHandlers(type, value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Initializes all parameter types for a given target service class.\n   */\n  private initializeParams(type: Function, paramTypes: any[]): any[] {\n    return paramTypes.map((paramType, index) => {\n      const paramHandler = Array.from(Container.handlers.values()).find(\n        handler => handler.object === type && handler.index === index\n      );\n      if (paramHandler) {\n        return paramHandler.value(this);\n      }\n\n      if (\n        paramType &&\n        paramType.name &&\n        !this.isTypePrimitive(paramType.name)\n      ) {\n        return this.get(paramType);\n      }\n\n      return undefined;\n    });\n  }\n\n  /**\n   * Checks if given type is primitive (e.g. string, boolean, number, object).\n   */\n  private isTypePrimitive(param: string): boolean {\n    return (\n      ['string', 'boolean', 'number', 'object'].indexOf(param.toLowerCase()) !== -1\n    );\n  }\n\n  /**\n   * Applies all registered handlers on a given target class.\n   */\n  private applyPropertyHandlers(\n    target: Function,\n    instance: { [key: string]: any }\n  ) {\n    Container.handlers.forEach(handler => {\n      if (typeof handler.index === 'number') {\n        return;\n      }\n      if (\n        handler.object.constructor !== target &&\n        !(target.prototype instanceof handler.object.constructor)\n      ) {\n        return;\n      }\n      instance[handler.propertyName] = handler.value(this);\n    });\n  }\n}\n","import { ContainerInstance } from './ContainerInstance';\nimport { Token } from './Token';\nimport { Handler } from './types/Handler';\nimport { ObjectType } from './types/ObjectType';\nimport { ServiceIdentifier } from './types/ServiceIdentifier';\nimport { ServiceMetadata } from './types/ServiceMetadata';\n\n/**\n * Service container.\n */\nexport class Container {\n  // -------------------------------------------------------------------------\n  // Private Static Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Global container instance.\n   */\n  private static readonly globalInstance: ContainerInstance = new ContainerInstance(\n    undefined\n  );\n\n  /**\n   * Other containers created using Container.of method.\n   */\n  private static readonly instances: Map<string, ContainerInstance> = new Map();\n\n  /**\n   * All registered handlers.\n   */\n  static readonly handlers: Map<Handler, Handler> = new Map();\n\n  // -------------------------------------------------------------------------\n  // Public Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Gets a separate container instance for the given instance id.\n   */\n  static of(instanceId: any): ContainerInstance {\n    if (instanceId === undefined) return this.globalInstance;\n\n    let container = this.instances.get(instanceId);\n    if (!container) {\n      container = new ContainerInstance(instanceId);\n      this.instances.set(instanceId, container);\n    }\n\n    return container;\n  }\n\n  /**\n   * Checks if the service with given name or type is registered service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  static has<T>(type: ObjectType<T>): boolean;\n\n  /**\n   * Checks if the service with given name or type is registered service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  static has<T>(id: string): boolean;\n\n  /**\n   * Checks if the service with given name or type is registered service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  static has<T>(id: Token<T>): boolean;\n\n  /**\n   * Checks if the service with given name or type is registered service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  static has<T>(identifier: ServiceIdentifier): boolean {\n    return this.globalInstance.has(identifier as any);\n  }\n\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  static get<T>(type: ObjectType<T>): T;\n\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  static get<T>(id: string): T;\n\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  static get<T>(id: Token<T>): T;\n\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  static get<T>(service: { service: T }): T;\n\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  static get<T>(identifier: ServiceIdentifier<T>): T {\n    return this.globalInstance.get(identifier as any);\n  }\n\n  /**\n   * Gets all instances registered in the container of the given service identifier.\n   * Used when service defined with multiple: true flag.\n   */\n  static getMany<T>(id: string): T[];\n\n  /**\n   * Gets all instances registered in the container of the given service identifier.\n   * Used when service defined with multiple: true flag.\n   */\n  static getMany<T>(id: Token<T>): T[];\n\n  /**\n   * Gets all instances registered in the container of the given service identifier.\n   * Used when service defined with multiple: true flag.\n   */\n  static getMany<T>(id: string | Token<T>): T[] {\n    return this.globalInstance.getMany(id as any);\n  }\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  static set<T, K extends keyof T>(service: ServiceMetadata<T, K>): Container;\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  static set(type: Function, value: any): Container;\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  static set(name: string, value: any): Container;\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  static set(token: Token<any>, value: any): Container;\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  static set<T, K extends keyof T>(values: ServiceMetadata<T, K>[]): Container;\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  static set(\n    identifierOrServiceMetadata:\n      | ServiceIdentifier\n      | ServiceMetadata<any, any>\n      | (ServiceMetadata<any, any>[]),\n    value?: any\n  ): Container {\n    this.globalInstance.set(identifierOrServiceMetadata as any, value);\n    return this;\n  }\n\n  /**\n   * Removes services with a given service identifiers (tokens or types).\n   */\n  static remove(...ids: ServiceIdentifier[]): Container {\n    this.globalInstance.remove(...ids);\n    return this;\n  }\n\n  /**\n   * Completely resets the container by removing all previously registered services and handlers from it.\n   */\n  static reset(containerId?: any): Container {\n    if (containerId) {\n      const instance = this.instances.get(containerId);\n      if (instance) {\n        instance.reset();\n        this.instances.delete(containerId);\n      }\n    } else {\n      this.globalInstance.reset();\n      Array.from(this.instances.values()).forEach(i => i.reset());\n    }\n    return this;\n  }\n\n  /**\n   * Registers a new handler.\n   */\n  static registerHandler(handler: Handler): Container {\n    this.handlers.set(handler, handler);\n    return this;\n  }\n\n  /**\n   * Helper method that imports given services.\n   */\n  static import(services: Function[]): Container {\n    return this;\n  }\n}\n","import { Metadata } from '../decorators';\nimport { createUniqueHash } from './create-unique-hash';\nimport { Container } from '../container/Container';\nimport { ServiceMetadata } from '../container/types/ServiceMetadata';\nimport { ServiceOptions } from '../container/types/ServiceOptions';\nimport { Token } from '../container/Token';\n\nexport function ReflectDecorator<T, K extends keyof T>(\n  options: any,\n  metaOptions: Metadata\n) {\n  return (target: Function) => {\n    const uniqueHashForClass = createUniqueHash(\n      `${target}${JSON.stringify(options, null, 4)}`\n    );\n    Object.defineProperty(target, 'originalName', {\n      value: target.name || target.constructor.name,\n      writable: false\n    });\n    Object.defineProperty(target, 'name', {\n      value: uniqueHashForClass,\n      writable: true\n    });\n    const nameCapitalized = (name: string) =>\n      name.charAt(0).toUpperCase() + name.slice(1);\n\n    target['metadata'] = {\n      moduleName: target['originalName'],\n      moduleHash: uniqueHashForClass,\n      options: options || null,\n      type: metaOptions.type,\n      raw: `\n        ---- @${nameCapitalized(metaOptions.type)} '${target.name}' metadata----\n        @${nameCapitalized(metaOptions.type)}(${JSON.stringify(\n        options,\n        null,\n        4\n      )})\n        ${target['originalName']}\n        `\n    };\n    const service: ServiceMetadata<T, K> = {\n      type: target\n    };\n\n    if (typeof options === 'string' || options instanceof Token) {\n        service.id = options;\n        service.multiple = (options as ServiceOptions<T, K>).multiple;\n        service.global = (options as ServiceOptions<T, K>).global || false;\n        service.transient = (options as ServiceOptions<T, K>).transient;\n\n    } else if (options) { // ServiceOptions\n        service.id = (options as ServiceOptions<T, K>).id;\n        service.factory = (options as ServiceOptions<T, K>).factory;\n        service.multiple = (options as ServiceOptions<T, K>).multiple;\n        service.global = (options as ServiceOptions<T, K>).global || false;\n        service.transient = (options as ServiceOptions<T, K>).transient;\n    }\n\n\n    Container.set(service);\n  };\n}\n","import { ServiceOptions } from '../../container/types/ServiceOptions';\nimport { Token } from '../../container/Token';\nimport { ReflectDecorator } from '../../helpers/reflect.decorator';\n\nexport interface TypeProvide<T> extends Function {\n    new(...args: any[]): T;\n}\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(): Function;\n\n// export function Service(config: { providedIn?: TypeProvide<any> | 'root' | null, useFactory?: () => any }): Function;\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(name: string): Function;\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(token: Token<any>): Function;\n\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service<T, K extends keyof T>(options?: ServiceOptions<T, K>): Function;\n\n/**\n * Marks class as a service that can be injected using container.\n */\nexport function Service(options?: ServiceOptions<any, any> | Token<any> | string): Function {\n    return ReflectDecorator(options, { type: 'service' });\n}\n\n","export * from './on-before';\nexport * from './on-init';","export { Service as Injectable } from '../decorators/service/Service';\nexport { Container } from './Container';\nexport { ContainerInstance } from './ContainerInstance';\nexport { Handler } from './types/Handler';\nexport { ServiceOptions } from './types/ServiceOptions';\nexport { ServiceIdentifier } from './types/ServiceIdentifier';\nexport { ServiceMetadata } from './types/ServiceMetadata';\nexport { ObjectType } from './types/ObjectType';\nexport { Token as InjectionToken } from './Token';\nexport * from './types/hooks/index';","import {\n  CacheLayerInterface,\n  CacheServiceConfigInterface\n} from './cache-layer.interfaces';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { filter, map, timeoutWith, skip, take } from 'rxjs/operators';\n\nexport class CacheLayer<T> {\n  public items: BehaviorSubject<Array<T>> = new BehaviorSubject([]);\n  public name: string;\n  public config: CacheServiceConfigInterface;\n  public map: Map<any, any> = new Map();\n\n  public get(name): T {\n    return this.map.get(name);\n  }\n\n  constructor(layer: CacheLayerInterface) {\n    this.name = layer.name;\n    this.config = layer.config;\n    this.initHook(layer);\n  }\n\n  private initHook(layer) {\n    if (this.config.maxAge) {\n      this.onExpireAll(layer);\n    }\n  }\n\n  private onExpireAll(layer) {\n    layer.items.forEach(item => this.onExpire(item['key']));\n  }\n\n  private putItemHook(layerItem): void {\n    if (this.config.maxAge) {\n      this.onExpire(layerItem['key']);\n    }\n  }\n\n  public getItem(key: string): T {\n    if (this.map.has(key)) {\n      return this.get(key);\n    } else {\n      return null;\n    }\n  }\n\n  public putItem(layerItem: T): T {\n    this.map.set(layerItem['key'], layerItem);\n    const item = this.get(layerItem['key']);\n    const filteredItems = this.items\n      .getValue()\n      .filter(item => item['key'] !== layerItem['key']);\n    this.items.next([...filteredItems, item]);\n    this.putItemHook(layerItem);\n    return layerItem;\n  }\n\n  private onExpire(key: string) {\n    return new Observable(observer => observer.next())\n      .pipe(\n        timeoutWith(this.config.maxAge, of(1)),\n        skip(1),\n        take(1)\n      )\n      .subscribe(() => this.removeItem(key));\n  }\n\n  public removeItem(key: string): void {\n    const newLayerItems = this.items\n      .getValue()\n      .filter(item => item['key'] !== key);\n    this.map.delete(key);\n    this.items.next(newLayerItems);\n  }\n\n  public getItemObservable(key: string): Observable<T> {\n    return this.items.asObservable().pipe(\n      filter(() => !!this.map.has(key)),\n      map(() => this.map.get(key))\n    );\n  }\n\n  public flushCache(): Observable<boolean> {\n    return this.items.asObservable().pipe(\n      map(items => {\n        items.forEach(i => this.removeItem(i['key']));\n        return true;\n      })\n    );\n  }\n}\n","function strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  return o.reduce((res, key) => {\n    res[key] = key;\n    return res;\n  }, Object.create(null));\n}\nexport const InternalEvents = strEnum(['load', 'config']);\nexport type InternalEvents = keyof typeof InternalEvents;\n\nexport const InternalLayers = strEnum(['globalConfig', 'modules']);\nexport type InternalLayers = keyof typeof InternalLayers;\n","export class LoggerConfig {\n  logging?: boolean = process.env.LOGGING === 'true' ? true : false;\n  hashes?: boolean = true;\n  date?: boolean = true;\n  exitHandler?: boolean = true;\n  fileService?: boolean = true;\n}\n\nexport class PrivateCryptoModel {\n  algorithm?: string;\n  cyperIv?: string;\n  cyperKey?: string;\n}\n\nexport class ExperimentalFeatures {\n  // crypto?: PrivateCryptoModel;\n  logExtendedInjectables?: boolean;\n  showModuleWithDependencies?: boolean;\n}\n\nexport class InitOptionsConfig {\n  services?: boolean;\n  controllers?: boolean;\n  effects?: boolean;\n  pluginsBefore?: boolean;\n  plugins?: boolean;\n  components?: boolean;\n  pluginsAfter?;\n}\n\nexport class ConfigModel {\n  init?: boolean = true;\n  initOptions?: InitOptionsConfig = new InitOptionsConfig();\n  experimental?: ExperimentalFeatures = new ExperimentalFeatures();\n  logger?: LoggerConfig = new LoggerConfig();\n  strict?: boolean;\n}\n","import { Service } from '../../decorators/service/Service';\nimport { ConfigModel } from './config.model';\n\n@Service()\nexport class ConfigService {\n  config: ConfigModel = new ConfigModel();\n  setConfig(config: ConfigModel) {\n    Object.assign(this.config, config);\n  }\n}\n","export * from './config.model';\nexport * from './config.service';","import { Container } from '../../container';\n\nexport function Injector<T>(Service: T): Function {\n    return function (target: Function, propertyName: string) {\n        Object.defineProperty(target, propertyName, {\n          get: () => Container.get(Service)\n        });\n    };\n}\n","import { Service } from '../../decorators/service/Service';\nimport { ConfigService } from '../config/index';\nimport { Injector } from '../../decorators/injector/injector.decorator';\n\n@Service()\nexport class BootstrapLogger {\n  @Injector(ConfigService) configService: ConfigService;\n\n  log(message: string) {\n    if (this.configService.config.logger.logging) {\n      const m = [this.logDate(), message];\n      console.log(...m);\n      return m;\n    }\n  }\n\n  error(message: string) {\n    console.error(message);\n  }\n\n  logImporter(message: string) {\n    if (this.configService.config.logger.logging) {\n      return this.log(message);\n    }\n  }\n\n  logDate() {\n    if (this.configService.config.logger.date) {\n      return `${Date.now().toPrecision()}`;\n    } else {\n      return '';\n    }\n  }\n\n  logFileService(message: string) {\n    if (this.configService.config.logger.fileService) {\n      this.log(message);\n      return '``';\n    }\n  }\n\n  logHashes(message: string) {\n    if (this.configService.config.logger.hashes) {\n      return message;\n    } else {\n      return '';\n    }\n  }\n\n  logExitHandler(message: string) {\n    if (this.configService.config.logger.exitHandler) {\n      this.log(message);\n    } else {\n      return '';\n    }\n  }\n}\n","export * from './bootstrap-logger';","import { BehaviorSubject, Observable, of } from 'rxjs';\nimport { take, map, timeoutWith, skip } from 'rxjs/operators';\nimport { CacheLayer } from './cache-layer';\nimport {\n  CacheLayerItem,\n  CacheLayerInterface,\n  Duplicates\n} from './cache-layer.interfaces';\nimport { InternalEvents, InternalLayers } from '../../helpers/events';\nimport { Service } from '../../decorators/service/Service';\nimport {\n  Metadata,\n  ServiceArgumentsInternal\n} from '../../decorators/module/module.interfaces';\nimport { BootstrapLogger } from '../bootstrap-logger/index';\n\nconst FRIENDLY_ERROR_MESSAGES = {\n  TRY_TO_UNSUBSCRIBE:\n    'Someone try to unsubscribe from collection directly... agghhh.. read docs! Blame: '\n};\n\n@Service()\nexport class CacheService {\n  constructor(private logger: BootstrapLogger) {}\n\n  public _cachedLayers: BehaviorSubject<\n    CacheLayer<CacheLayerItem<any>>[]\n  > = new BehaviorSubject([]);\n  public map: Map<any, any> = new Map();\n  config: any = {};\n\n  public static createCacheInstance<T>(\n    cacheLayer\n  ): CacheLayer<CacheLayerItem<T>> {\n    return new CacheLayer<CacheLayerItem<T>>(cacheLayer);\n  }\n\n  public getLayer<T>(name: string): CacheLayer<CacheLayerItem<T>> {\n    const exists = this.map.has(name);\n    if (!exists) {\n      return this.createLayer<T>({ name: name });\n    }\n    return this.map.get(name);\n  }\n\n  public getLayersByName<T>(name: string): CacheLayer<CacheLayerItem<T>>[] {\n    return Array.from(this.map.keys())\n      .map(item => {\n        if (\n          item !== InternalLayers.modules &&\n          item !== InternalLayers.globalConfig\n        ) {\n          const config = this.getLayer<{\n            moduleName: string;\n            moduleHash: string;\n          }>(item).getItem(InternalEvents.config);\n          if (config && config.data && name === config.data.moduleName) {\n            return this.getLayer(config.data.moduleHash);\n          }\n        }\n      })\n      .filter(i => !!i) as any;\n  }\n\n  public searchForDuplicateDependenciesInsideApp() {\n    const uniq = [].concat\n      .apply(\n        [],\n        Array.from(this.map.keys()).map(key =>\n          Array.from(this.getLayer(key).map.keys())\n            .map(key => (!this.isExcludedEvent(key) ? key : null))\n            .filter(i => !!i)\n        )\n      )\n      .map(name => Object.create({ count: 1, name }))\n      .reduce((a, b) => {\n        a[b.name] = (a[b.name] || 0) + b.count;\n        return a;\n      }, {});\n    const duplicates = Object.keys(uniq).filter(a => uniq[a] > 1);\n    if (duplicates.length) {\n      const dups = this.searchForDuplicatesByHash(duplicates[0]);\n      const moduleType =\n        dups[0].class['metadata']['type'].charAt(0).toUpperCase() +\n        dups[0].class['metadata']['type'].slice(1);\n      throw new Error(`\n                ${dups[0].class['metadata'].raw}\n                ${moduleType}: '${dups[0].originalName}' found multiple times!\n                ${moduleType} hash: ${dups[0].moduleHash}\n                Modules: [${dups[0].moduleName}, ${dups[1].moduleName}]\n\n                Hint: '${\n                  dups[0].originalName\n                }' class identity hash is identical in both\n                imported files inside ${dups[0].moduleName} and ${\n        dups[1].moduleName\n      }\n                consider removing one of the '${dups[0].originalName}'\n            `);\n    }\n    return duplicates;\n  }\n\n  private isExcludedEvent(i: any) {\n    return i === InternalEvents.config || i === InternalEvents.load;\n  }\n\n  public searchForItem(classItem: Function): ServiceArgumentsInternal {\n    return Array.from(this.map.keys())\n      .map(module => {\n        const currentModule = this.getLayer(module);\n        const currentModuleDependencies = Array.from(currentModule.map.keys());\n        const found = currentModuleDependencies.filter(i => {\n          if (this.isExcludedEvent(i)) {\n            return;\n          } else {\n            return i === classItem.name;\n          }\n        });\n        if (found.length) {\n          return currentModule.getItem(found[0]).data;\n        }\n      })\n      .filter(i => !!i)[0] as ServiceArgumentsInternal;\n  }\n\n  public searchForDuplicatesByHash(key: string): Duplicates[] {\n    return Array.from(this.map.keys())\n      .map(module => {\n        const currentModule = this.getLayer<any>(module);\n        const found = Array.from(currentModule.map.keys()).filter(i => {\n          if (this.isExcludedEvent(i)) {\n            return;\n          }\n          return i === key;\n        });\n\n        if (found.length) {\n          const currentFoundItem = currentModule.getItem(found[0]);\n          const currentModuleName = this.getLayer<Metadata>(module).getItem(\n            InternalEvents.config\n          );\n          return {\n            moduleName: currentModuleName.data.moduleName,\n            moduleHash: currentModuleName.data.moduleHash,\n            originalName: currentFoundItem.data.originalName,\n            dupeName: currentFoundItem.key,\n            raw: currentModuleName.data.raw,\n            class: currentFoundItem.data\n          };\n        }\n      })\n      .filter(i => !!i) as any;\n  }\n\n  public createLayer<T>(\n    layer: CacheLayerInterface\n  ): CacheLayer<CacheLayerItem<T>> {\n    const exists = this.map.has(layer.name);\n    if (exists) {\n      return this.map.get(layer.name);\n    }\n    layer.items = layer.items || [];\n    layer.config = layer.config || this.config;\n    const cacheLayer = CacheService.createCacheInstance<T>(layer);\n    this.map.set(cacheLayer.name, cacheLayer);\n    this._cachedLayers.next([...this._cachedLayers.getValue(), cacheLayer]);\n    this.LayerHook<T>(cacheLayer);\n    return cacheLayer;\n  }\n\n  private LayerHook<T>(layerInstance: CacheLayer<CacheLayerItem<T>>): void {\n    this.protectLayerFromInvaders<T>(layerInstance);\n    if (\n      layerInstance.config.cacheFlushInterval ||\n      this.config.cacheFlushInterval\n    ) {\n      this.OnExpire(layerInstance);\n    }\n  }\n\n  private protectLayerFromInvaders<T>(\n    cacheLayer: CacheLayer<CacheLayerItem<T>>\n  ): void {\n    cacheLayer.items.constructor.prototype.unsubsribeFromLayer =\n      cacheLayer.items.constructor.prototype.unsubscribe;\n    cacheLayer.items.constructor.prototype.unsubscribe = () => {\n      console.error(\n        FRIENDLY_ERROR_MESSAGES.TRY_TO_UNSUBSCRIBE + cacheLayer.name\n      );\n    };\n  }\n\n  private OnExpire<T>(layerInstance: CacheLayer<CacheLayerItem<T>>) {\n    return new Observable(observer => observer.next())\n      .pipe(\n        timeoutWith(\n          layerInstance.config.cacheFlushInterval ||\n            this.config.cacheFlushInterval,\n          of(1)\n        ),\n        skip(1),\n        take(1)\n      )\n      .subscribe(() => this.removeLayer(layerInstance));\n  }\n\n  public removeLayer<T>(layerInstance: CacheLayer<CacheLayerItem<T>>): void {\n    this.map.delete(layerInstance.name);\n    this._cachedLayers.next([\n      ...this._cachedLayers\n        .getValue()\n        .filter(layer => layer.name !== layerInstance.name)\n    ]);\n  }\n\n  public transferItems(\n    name: string,\n    newCacheLayers: CacheLayerInterface[]\n  ): CacheLayer<CacheLayerItem<any>>[] {\n    const oldLayer = this.getLayer(name);\n    const newLayers = [];\n    newCacheLayers.forEach(layerName => {\n      const newLayer = this.createLayer(layerName);\n      oldLayer.items.getValue().forEach(item => newLayer.putItem(item));\n      newLayers.push(newLayer);\n    });\n    return newLayers;\n  }\n\n  public flushCache(): Observable<boolean> {\n    let oldLayersNames: string[];\n    return this._cachedLayers.pipe(\n      take(1),\n      map((layers: any[]) => {\n        oldLayersNames = layers.map(l => l.name);\n        layers.forEach(layer => this.removeLayer(layer));\n        oldLayersNames.forEach(l => this.createLayer({ name: l }));\n        return true;\n      })\n    );\n  }\n}\n","import { Metadata } from '../../decorators/module/module.interfaces';\n\nexport interface CacheLayerItem<T> {\n  key: string;\n  data: T;\n}\n\nexport class CacheServiceConfigInterface {\n  deleteOnExpire?: string = 'aggressive';\n  cacheFlushInterval?: number | null = 60 * 60 * 1000;\n  maxAge?: number | null = 15 * 60 * 1000;\n  localStorage?: boolean = false;\n}\n\nexport interface CacheLayerInterface {\n  name: string;\n  config?: CacheServiceConfigInterface;\n  items?: any;\n}\n\nexport interface Duplicates extends Metadata {\n  dupeName: string;\n  originalName: string;\n  class: Function;\n}\n","export * from './cache-layer.service';\nexport * from './cache-layer';\nexport * from './cache-layer.interfaces';","import { BehaviorSubject } from 'rxjs';\n// import { PluginBase, PluginNameVersion, PluginPackage } from 'hapi';\nimport { Service } from '../../decorators/service/Service';\nimport { ServiceArgumentsInternal } from '../../decorators/module/module.interfaces';\n\n@Service()\nexport class PluginService {\n  private plugins: BehaviorSubject<\n    Array<ServiceArgumentsInternal>\n  > = new BehaviorSubject([]);\n  private beforePlugins: BehaviorSubject<\n    Array<ServiceArgumentsInternal>\n  > = new BehaviorSubject([]);\n  private afterPlugins: BehaviorSubject<\n    Array<ServiceArgumentsInternal>\n  > = new BehaviorSubject([]);\n\n  register(plugin) {\n    this.plugins.next([...this.plugins.getValue(), plugin]);\n  }\n\n  registerBefore(plugin) {\n    this.beforePlugins.next([...this.plugins.getValue(), plugin]);\n  }\n\n  registerAfter(plugin) {\n    this.afterPlugins.next([...this.plugins.getValue(), plugin]);\n  }\n\n  getPlugins(): Array<ServiceArgumentsInternal> {\n    return this.plugins.getValue();\n  }\n\n  getAfterPlugins() {\n    return this.afterPlugins.getValue();\n  }\n\n  getBeforePlugins() {\n    return this.beforePlugins.getValue();\n  }\n}\n","import { Service } from '../../decorators/service/Service';\nimport { BootstrapLogger } from '../bootstrap-logger';\nimport { Injector } from '../../decorators/injector/injector.decorator';\nimport { Observable, Subject } from 'rxjs';\n\nexport type NodejsEvents =\n  | 'beforeExit'\n  | 'disconnect'\n  | 'exit'\n  | 'rejectionHandled'\n  | 'uncaughtException'\n  | 'unhandledRejection'\n  | 'warning'\n  | 'message'\n  | 'newListener'\n  | 'removeListener';\n\nexport type Signals =\n  | 'SIGABRT'\n  | 'SIGALRM'\n  | 'SIGBUS'\n  | 'SIGCHLD'\n  | 'SIGCONT'\n  | 'SIGFPE'\n  | 'SIGHUP'\n  | 'SIGILL'\n  | 'SIGINT'\n  | 'SIGIO'\n  | 'SIGIOT'\n  | 'SIGKILL'\n  | 'SIGPIPE'\n  | 'SIGPOLL'\n  | 'SIGPROF'\n  | 'SIGPWR'\n  | 'SIGQUIT'\n  | 'SIGSEGV'\n  | 'SIGSTKFLT'\n  | 'SIGSTOP'\n  | 'SIGSYS'\n  | 'SIGTERM'\n  | 'SIGTRAP'\n  | 'SIGTSTP'\n  | 'SIGTTIN'\n  | 'SIGTTOU'\n  | 'SIGUNUSED'\n  | 'SIGURG'\n  | 'SIGUSR1'\n  | 'SIGUSR2'\n  | 'SIGVTALRM'\n  | 'SIGWINCH'\n  | 'SIGXCPU'\n  | 'SIGXFSZ'\n  | 'SIGBREAK'\n  | 'SIGLOST'\n  | 'SIGINFO';\n\n@Service()\nexport class ExitHandlerService {\n  errorHandler: Subject<any> = new Subject();\n  @Injector(BootstrapLogger) private logger: BootstrapLogger;\n\n  init() {}\n\n  exitHandler(options, err) {\n    this.errorHandler.next(err);\n    if (options.cleanup) {\n      this.logger.logExitHandler('AppStopped');\n    }\n    if (err) console.log(err.stack);\n    if (options.exit) {\n      this.logger.logExitHandler('Unhandled error rejection');\n    }\n    process.exit(0);\n  }\n\n  onExitApp(events: Array<Signals>) {\n    return new Observable(\n      o =>\n        events &&\n        events.length &&\n        events.forEach(event => process.on(event, e => o.next(e)))\n    );\n  }\n}\n","export * from './exit-handler.service';","import { CacheService, CacheLayer, CacheLayerItem } from '../cache/index';\nimport { Container } from '../../container';\nimport { BootstrapLogger } from '../bootstrap-logger';\nimport { Service } from '../../decorators/service/Service';\n\n@Service()\nexport class RequestCacheService extends CacheService {\n  cacheLayer: CacheLayer<CacheLayerItem<any>>;\n  constructor() {\n    super(Container.get(BootstrapLogger));\n    this.cacheLayer = this.createLayer({ name: 'request-cache-layer' });\n  }\n\n  put(key, data) {\n    return this.cacheLayer.putItem({ key, data });\n  }\n\n  get(key) {\n    return this.cacheLayer.getItem(key);\n  }\n}\n","import { Service } from '../../decorators/service/Service';\nimport { Observable, of } from 'rxjs';\nimport { get as httpGet } from 'http';\nimport { get as httpsGet } from 'https';\nimport { RequestCacheService } from './request.cache.service';\nimport { Injector } from '../../decorators/injector/injector.decorator';\nimport { tap } from 'rxjs/operators';\nimport { BootstrapLogger } from '../bootstrap-logger';\n\n@Service()\nexport class RequestService {\n  @Injector(RequestCacheService) private cache: RequestCacheService;\n  @Injector(BootstrapLogger) private logger: BootstrapLogger;\n\n  get(link: string, cacheHash?: any) {\n    if (this.cache.cacheLayer.map.has(link)) {\n      this.logger.log(`Item returned from cacahe: ${link}`);\n      return of(this.cache.cacheLayer.get(link).data);\n    }\n    return new Observable(o => {\n      if (link.includes('https://')) {\n        httpsGet(link, resp => {\n          let data = '';\n          resp.on('data', chunk => (data += chunk));\n          resp.on('end', () => o.next(data));\n        }).on('error', err => {\n          console.error('Error: ' + err.message);\n          o.error(err);\n        });\n      } else {\n        httpGet(link, resp => {\n          let data = '';\n          resp.on('data', chunk => (data += chunk));\n          resp.on('end', () => o.next(data));\n        }).on('error', err => {\n          console.error('Error: ' + err.message);\n          o.error(err);\n        });\n      }\n    }).pipe(\n      tap(res => this.cache.cacheLayer.putItem({ key: link, data: res }))\n    );\n  }\n}\n","export * from './request.service';\nexport * from './request.cache.service';","const path = require('path');\nconst fs = require('fs');\nconst _0777 = parseInt('0777', 8);\n\n\nexport function mkdirp(p?, opts?, f?, made?) {\n    if (typeof opts === 'function') {\n        f = opts;\n        opts = {};\n    }\n    else if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n\n    let mode = opts.mode;\n    const xfs = opts.fs || fs;\n\n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    const cb = f || function () { };\n    p = path.resolve(p);\n\n    xfs.mkdir(p, mode, function (er) {\n        if (!er) {\n            made = made || p;\n            return cb(null, made);\n        }\n        switch (er.code) {\n            case 'ENOENT':\n                mkdirp(path.dirname(p), opts, function (er, made) {\n                    if (er) cb(er, made);\n                    else mkdirp(p, opts, cb, made);\n                });\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                xfs.stat(p, function (er2, stat) {\n                    // if the stat fails, then that's super weird.\n                    // let the original error be the failure reason.\n                    if (er2 || !stat.isDirectory()) cb(er, made);\n                    else cb(null, made);\n                });\n                break;\n        }\n    });\n}\n\nexport function mkdirpSync(p?, opts?, made?) {\n    if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n\n    let mode = opts.mode;\n    const xfs = opts.fs || fs;\n\n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    p = path.resolve(p);\n\n    try {\n        xfs.mkdirSync(p, mode);\n        made = made || p;\n    }\n    catch (err0) {\n        switch (err0.code) {\n            case 'ENOENT':\n                made = mkdirpSync(path.dirname(p), opts, made);\n                mkdirpSync(p, opts, made);\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                let stat;\n                try {\n                    stat = xfs.statSync(p);\n                }\n                catch (err1) {\n                    throw err0;\n                }\n                if (!stat.isDirectory()) throw err0;\n                break;\n        }\n    }\n\n    return made;\n}","import { Service } from '../../decorators/service/Service';\nimport {\n  writeFileSync,\n  existsSync,\n  readdir,\n  stat,\n  writeFile,\n  readFileSync,\n  readFile\n} from 'fs';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { BootstrapLogger } from '../bootstrap-logger';\nimport { Injector } from '../../decorators/injector/injector.decorator';\nimport { resolve } from 'path';\nimport { mkdirp } from './dist';\n\n@Service()\nexport class FileService {\n  @Injector(BootstrapLogger) private logger: BootstrapLogger;\n\n  writeFile(folder: string, fileName, moduleName, file) {\n    return this.mkdirp(folder).pipe(\n      tap(() => {\n        this.logger.logFileService(\n          `Bootstrap: @Service('${moduleName}'): Saved inside ${folder}`\n        );\n      }),\n      switchMap(() => this.writeFileAsyncP(folder, fileName, file))\n    );\n  }\n\n  writeFileAsync(folder: string, fileName, moduleName, file) {\n    return this.mkdirp(folder).pipe(\n      switchMap(() => this.writeFileAsyncP(folder, fileName, file)),\n      map(() => {\n        this.logger.logFileService(\n          `Bootstrap: external @Module('${moduleName}') namespace: Saved inside ${folder}`\n        );\n        return `${folder}/${fileName}`;\n      })\n    );\n  }\n\n  writeFileSync(folder, file) {\n    return writeFileSync.bind(null)(\n      folder,\n      JSON.stringify(file, null, 2) + '\\n',\n      { encoding: 'utf-8' }\n    );\n  }\n\n  readFile(file: string) {\n    return JSON.parse(readFileSync.bind(null)(file, { encoding: 'utf-8' }));\n  }\n\n  isPresent(path: string) {\n    return existsSync(path);\n  }\n\n  writeFileAsyncP(folder, fileName, content) {\n    return new Observable(o =>\n      writeFile(`${folder}/${fileName}`, content, () => o.next(true))\n    );\n  }\n\n  mkdirp(folder): Observable<boolean> {\n    return new Observable(observer => {\n      mkdirp(folder, err => {\n        if (err) {\n          console.error(err);\n          observer.error(false);\n        } else {\n          observer.next(true);\n        }\n        observer.complete();\n      });\n    });\n  }\n\n  public fileWalker(\n    dir: string,\n    exclude: string = 'node_modules'\n  ): Observable<string[]> {\n    return new Observable(observer => {\n      this.filewalker(\n        dir,\n        (err, result) => {\n          if (err) {\n            observer.error(err);\n          } else {\n            observer.next(result);\n          }\n          observer.complete();\n        },\n        exclude\n      );\n    });\n  }\n\n  private filewalker(\n    dir: string,\n    done: (err: NodeJS.ErrnoException, data?: any) => void,\n    exclude = 'node_modules'\n  ) {\n    let results = [];\n    const fileWalker = this.filewalker.bind(this);\n    readdir(dir, (err, list) => {\n      if (err) {\n        return done(err);\n      }\n      let pending = list.length;\n      if (!pending) {\n        return done(null, results);\n      }\n      list.forEach(file => {\n        file = resolve(dir, file);\n        stat(file, (err, stat) => {\n          if (stat && stat.isDirectory()) {\n            results.push(file);\n            if (!file.includes(exclude)) {\n              fileWalker(\n                file,\n                (err, res) => {\n                  results = results.concat(res);\n                  if (!--pending) {\n                    done(null, results);\n                  }\n                },\n                exclude\n              );\n            } else if (!--pending) {\n              done(null, results);\n            }\n          } else {\n            results.push(file);\n            if (!--pending) {\n              done(null, results);\n            }\n          }\n        });\n      });\n    });\n  }\n}\n","export * from './file.service';","// import { createReadStream, createWriteStream } from 'fs';\n// import { createGzip, createGunzip } from 'zlib';\n// import { Observable } from 'rxjs';\nimport { Service } from '../../decorators/service/Service';\nimport { Injector } from '../../decorators/injector/injector.decorator';\nimport { ConfigService, PrivateCryptoModel } from '../config/index';\n\n@Service()\nexport class CompressionService {\n  @Injector(ConfigService) private config: ConfigService;\n\n  // public gZipFile(input: string, output: string, options: PrivateCryptoModel = { cyperIv: '', algorithm: '', cyperKey: '' }) {\n  //     const config = this.config.config.experimental.crypto || options;\n  //     return Observable.create(observer => {\n  //         createReadStream(input)\n  //             .pipe(createGzip())\n  //             // .pipe(createCipheriv(config.algorithm, config.cyperKey, config.cyperIv))\n  //             .pipe(createWriteStream(output))\n  //             .on('finish', () => observer.next(true))\n  //             .on('error', (err) => observer.error(err));\n  //     });\n  // }\n\n  // public readGzipFile(input: string, output: string, options: PrivateCryptoModel = { cyperIv: '', algorithm: '', cyperKey: '' }) {\n  //     const config = this.config.config.experimental.crypto || options;\n  //     return Observable.create(observer => {\n  //         createReadStream(input)\n  //             // .pipe(createDecipheriv(config.algorithm, config.cyperKey, config.cyperIv))\n  //             .pipe(createGunzip())\n  //             .pipe(createWriteStream(output))\n  //             .on('finish', () => observer.next(true))\n  //             .on('error', (err) => observer.error(err));\n  //     });\n  // }\n\n  public gZipAll() {\n    // var archiver = require('archiver');\n    // var output = createWriteStream('./example.tar.gz');\n    // var archive = archiver('tar', {\n    //     gzip: true,\n    //     zlib: { level: 9 } // Sets the compression level.\n    // });\n    // archive.on('error', function (err) {\n    //     throw err;\n    // });\n    // // pipe archive data to the output file\n    // archive.pipe(output);\n    // // append files\n    // archive.file('/path/to/file0.txt', { name: 'file0-or-change-this-whatever.txt' });\n    // archive.file('/path/to/README.md', { name: 'foobar.md' });\n    // // Wait for streams to complete\n    // archive.finalize();\n  }\n}\n","import { Service } from '../../decorators/service/Service';\nimport { NpmPackageConfig } from '../external-importer/index';\nimport { BehaviorSubject } from 'rxjs';\nimport childProcess = require('child_process');\n\n@Service()\nexport class NpmService {\n  packagesToDownload: BehaviorSubject<NpmPackageConfig[]> = new BehaviorSubject(\n    []\n  );\n  packages: string[] = [];\n  child: childProcess.ChildProcess;\n\n  setPackages(packages: NpmPackageConfig[]) {\n    this.packagesToDownload.next([\n      ...this.packagesToDownload.getValue(),\n      ...packages\n    ]);\n  }\n\n  preparePackages() {\n    const arr = this.packagesToDownload.getValue() || [];\n    this.packages = [...new Set(arr.map(p => `${p.name}@${p.version}`))];\n  }\n\n  installPackages() {\n    return new Promise((resolve, reject) => {\n      this.preparePackages();\n      if (this.child) {\n        this.child.stdout.removeAllListeners('data');\n        this.child.stderr.removeAllListeners('data');\n        this.child.removeAllListeners('exit');\n        this.child.kill();\n      }\n      console.log(\n        `Installing npm packages on child process! ${this.packages.toString()}`\n      );\n      this.child = childProcess.spawn('npm', ['i', ...this.packages]);\n      this.child.stdout.on('data', data => process.stdout.write(data));\n      this.child.stderr.on('data', data => {\n        process.stdout.write(data);\n        // reject(data)\n      });\n      this.child.on('exit', code => {\n        console.log(`Child process exited with code ${code}`);\n        console.log(\n          `Installing npm packages DONE! ${this.packages.toString()}`\n        );\n        this.child = null;\n      });\n    });\n  }\n}\n","export const IPFS_PROVIDERS = <{name: IPFS_PROVIDERS; link: string}[]>[\n    {\n        name: 'cloudflare',\n        link: 'https://cloudflare-ipfs.com/ipfs/'\n    },\n    {\n        name: 'main-ipfs-node',\n        link: 'https://ipfs.io/ipfs/'\n    },\n    {\n        name: 'infura',\n        link: 'https://ipfs.infura.io/ipfs/'\n    },\n    {\n        name: 'local',\n        link: 'http://127.0.0.1:8080/ipfs/'\n    }\n];\n\n\nexport type IPFS_PROVIDERS = 'cloudflare' | 'main-ipfs-node' | 'local' | 'infura';","import { Service } from '../../decorators/service/Service';\nimport {\n  ExternalImporterConfig,\n  ExternalImporterIpfsConfig,\n  ExternalModuleConfiguration\n} from './external-importer-config';\nimport {\n  from,\n  Observable,\n  of,\n  combineLatest,\n  BehaviorSubject,\n  timer\n} from 'rxjs';\nimport { map, switchMap, take, filter, tap, takeUntil } from 'rxjs/operators';\nimport { RequestService } from '../request';\nimport { FileService } from '../file';\nimport { BootstrapLogger } from '../bootstrap-logger/bootstrap-logger';\nimport { Injector } from '../../decorators/injector/injector.decorator';\nimport { CompressionService } from '../compression/compression.service';\nimport { NpmService } from '../npm-service/npm.service';\nimport { PackagesConfig } from '../../bin/root';\nimport { IPFS_PROVIDERS } from './providers';\nimport SystemJS = require('systemjs');\n\n@Service()\nexport class ExternalImporter {\n  defaultJsonFolder: string = `${process.cwd()}/package.json`;\n  defaultTypescriptConfigJsonFolder: string = `${process.cwd()}/tsconfig.json`;\n\n  @Injector(RequestService) private requestService: RequestService;\n  @Injector(FileService) private fileService: FileService;\n  @Injector(BootstrapLogger) private logger: BootstrapLogger;\n  @Injector(CompressionService) compressionService: CompressionService;\n  @Injector(NpmService) private npmService: NpmService;\n\n  providers: BehaviorSubject<\n    { name: IPFS_PROVIDERS; link: string }[]\n  > = new BehaviorSubject(IPFS_PROVIDERS);\n  defaultProvider: string = this.getProvider('main-ipfs-node');\n  defaultNamespaceFolder: string = '@types';\n  defaultOutputFolder: string = 'node_modules';\n  setDefaultProvider(provider: IPFS_PROVIDERS) {\n    this.defaultProvider = this.getProvider(provider);\n  }\n  getProvider(name: IPFS_PROVIDERS) {\n    return this.providers.getValue().filter(p => p.name === name)[0].link;\n  }\n\n  setProviders(...args: { name: IPFS_PROVIDERS; link: string }[]) {\n    this.providers.next([...this.providers.getValue(), ...args]);\n  }\n\n  importExternalModule(module: string) {\n    return from(SystemJS.import(module));\n  }\n\n  validateConfig(config: ExternalImporterConfig) {\n    if (!config) {\n      throw new Error('Bootstrap: missing config');\n    }\n  }\n\n  // encryptFile(fileFullPath: string) {\n  //     if (this.configService.config.experimental.crypto) {\n  //         return this.compressionService.readGzipFile(fileFullPath, 'dada');\n  //     } else {\n  //         return of(null);\n  //     }\n  // }\n\n  // decryptFile(fileFullPath: string) {\n  //     if (this.configService.config.experimental.crypto) {\n  //         return this.compressionService.gZipFile(fileFullPath, 'dada');\n  //     } else {\n  //         return of(null);\n  //     }\n  // }\n\n  isWeb() {\n    let value = false;\n    try {\n      if (window) {\n        value = true;\n      }\n    } catch (e) {}\n    return value;\n  }\n\n  loadTypescriptConfigJson() {\n    let tsConfig: { compilerOptions?: { typeRoots?: string[] } } = {};\n    try {\n      tsConfig = this.fileService.readFile(\n        this.defaultTypescriptConfigJsonFolder\n      );\n    } catch (e) {\n      console.error(`\n            Error in loading tsconfig.json in ${\n              this.defaultTypescriptConfigJsonFolder\n            }\n            Error: ${e}\n            Fallback to creating tsconfig.json\n            `);\n    }\n    tsConfig.compilerOptions = tsConfig.compilerOptions || {};\n    tsConfig.compilerOptions.typeRoots =\n      tsConfig.compilerOptions.typeRoots || [];\n    return tsConfig;\n  }\n\n  addNamespaceToTypeRoots(namespace: string) {\n    const defaultNamespace = `./${\n      this.defaultOutputFolder\n    }/@types/${namespace}`;\n    const tsConfig = this.loadTypescriptConfigJson();\n    const foundNamespace = tsConfig.compilerOptions.typeRoots.filter(\n      t => t === defaultNamespace\n    ).length;\n    if (!foundNamespace) {\n      tsConfig.compilerOptions.typeRoots.push(defaultNamespace);\n      this.writeTypescriptConfigFile(tsConfig);\n    }\n    return of(true);\n  }\n\n  writeTypescriptConfigFile(file) {\n    this.fileService.writeFileSync(process.cwd() + '/tsconfig.json', file);\n  }\n\n  loadPackageJson() {\n    let packageJson;\n    try {\n      packageJson = this.fileService.readFile(this.defaultJsonFolder);\n    } catch (e) {\n      packageJson = {};\n    }\n    return packageJson;\n  }\n\n  loadNpmPackageJson() {\n    let packageJson;\n    try {\n      packageJson = this.fileService.readFile(`${process.cwd()}/package.json`);\n    } catch (e) {\n      packageJson = {};\n    }\n    return packageJson;\n  }\n\n  prepareDependencies() {\n    const file = this.loadNpmPackageJson();\n    if (file.dependencies) {\n      return Object.keys(file.dependencies).map(name => ({\n        name,\n        version: file.dependencies[name]\n      }));\n    }\n    return [];\n  }\n\n  isModulePresent(hash) {\n    const file = this.loadPackageJson();\n    let ipfsConfig: PackagesConfig[] = file.ipfs;\n    const found = [];\n    if (!ipfsConfig) {\n      ipfsConfig = this.defaultIpfsConfig();\n    }\n    ipfsConfig.forEach(c => {\n      const present = c.dependencies.filter(dep => dep === hash);\n      if (present.length) {\n        found.push(present[0]);\n      }\n    });\n    return found.length;\n  }\n\n  filterUniquePackages() {\n    const file = this.loadPackageJson();\n    let ipfsConfig: PackagesConfig[] = file.ipfs;\n    let dups = [];\n    if (!ipfsConfig) {\n      ipfsConfig = this.defaultIpfsConfig();\n    }\n    ipfsConfig.forEach(c => {\n      const uniq = c.dependencies\n        .map(name => {\n          return { count: 1, name: name };\n        })\n        .reduce((a, b) => {\n          a[b.name] = (a[b.name] || 0) + b.count;\n          return a;\n        }, {});\n\n      const duplicates = Object.keys(uniq).filter(a => uniq[a] > 1);\n      dups = [...dups, ...duplicates];\n    });\n\n    if (dups.length) {\n      throw new Error(\n        `There are packages which are with the same hash ${JSON.stringify(\n          dups\n        )}`\n      );\n    }\n    return dups.length;\n  }\n\n  defaultIpfsConfig() {\n    return [{ provider: this.defaultProvider, dependencies: [] }];\n  }\n\n  addPackageToJson(hash: string) {\n    const file = this.loadPackageJson();\n    let ipfsConfig: PackagesConfig[] = file.ipfs;\n    if (!ipfsConfig) {\n      ipfsConfig = this.defaultIpfsConfig();\n    }\n    const packages = this.prepareDependencies();\n    if (packages.length) {\n      file.packages = packages;\n    }\n    if (this.isModulePresent(hash)) {\n      this.logger.log(\n        `Package with hash: ${hash} present and will not be downloaded!`\n      );\n    } else {\n      ipfsConfig[0].dependencies.push(hash);\n      file.ipfs = ipfsConfig;\n    }\n\n    this.fileService.writeFileSync(this.defaultJsonFolder, file);\n  }\n\n  downloadIpfsModules(modules: ExternalImporterIpfsConfig[]) {\n    const latest = modules.map(m => this.downloadIpfsModule(m));\n    return combineLatest(latest.length ? latest : of());\n  }\n\n  downloadIpfsModuleConfig(config: ExternalImporterIpfsConfig) {\n    return this.requestService\n      .get(config.provider + config.hash, config.hash)\n      .pipe(\n        map(r => {\n          if (!r) {\n            throw new Error(\n              'Recieved undefined from provided address' +\n                config.provider +\n                config.hash\n            );\n          }\n          let res = r;\n          const metaString = '<!--meta-rxdi-ipfs-module-->';\n          if (res.includes(metaString)) {\n            try {\n              res = r.split(metaString)[1];\n            } catch (e) {}\n          }\n          return res;\n        }),\n        map(r => {\n          let res = r;\n          try {\n            res = JSON.parse(r);\n          } catch (e) {}\n          return res;\n        })\n      );\n  }\n\n  private combineDependencies(\n    dependencies: any[],\n    config: ExternalImporterIpfsConfig\n  ) {\n    return combineLatest(\n      dependencies.length\n        ? dependencies.map(h =>\n            this.downloadIpfsModule({ provider: config.provider, hash: h })\n          )\n        : of('')\n    );\n  }\n\n  private writeFakeIndexIfMultiModule(\n    folder: string,\n    nameSpaceFakeIndex: string[]\n  ) {\n    if (nameSpaceFakeIndex.length === 2) {\n      return this.fileService.writeFileAsyncP(\n        `${folder}${this.defaultNamespaceFolder}/${nameSpaceFakeIndex[0]}`,\n        'index.d.ts',\n        ''\n      );\n    } else {\n      return of(true);\n    }\n  }\n\n  downloadIpfsModule(config: ExternalImporterIpfsConfig) {\n    if (!config.provider) {\n      throw new Error(`Missing configuration inside ${config.hash}`);\n    }\n\n    if (!config.hash) {\n      throw new Error(`Missing configuration inside ${config.provider}`);\n    }\n    let folder: string;\n    let moduleLink: string;\n    const configLink = config.provider + config.hash;\n    let moduleTypings: string;\n    let moduleName: string;\n    let nameSpaceFakeIndex: string[];\n    let originalModuleConfig: ExternalModuleConfiguration;\n    let isNamespace: boolean;\n    let isRegular: string;\n    return this.downloadIpfsModuleConfig(config).pipe(\n      tap(res => {\n        if (!res['module']) {\n          console.log(\n            'Todo: create logic to load module which is not from rxdi infrastructure for now can be used useDynamic which will do the same job!'\n          );\n        }\n      }),\n      filter((res: ExternalModuleConfiguration) => !!res.module),\n      map((externalModule: ExternalModuleConfiguration) => {\n        moduleName = externalModule.name;\n        nameSpaceFakeIndex = moduleName.split('/');\n        folder = `${process.cwd()}/${this.defaultOutputFolder}/`;\n        moduleLink = `${config.provider}${externalModule.module}`;\n        moduleTypings = `${config.provider}${externalModule.typings}`;\n        externalModule.dependencies = externalModule.dependencies || [];\n        externalModule.packages = externalModule.packages || [];\n        originalModuleConfig = externalModule;\n        this.npmService.setPackages(externalModule.packages);\n        isNamespace = moduleName.split('/').length === 2;\n        isRegular = isNamespace ? moduleName : moduleName.split('/')[0];\n        this.logger.logFileService(\n          `Package config for module ${moduleName} downloaded! ${JSON.stringify(\n            externalModule\n          )}`\n        );\n        return externalModule;\n      }),\n      switchMap(externalModule =>\n        this.combineDependencies(externalModule.dependencies, config)\n      ),\n      switchMap(() => {\n        this.logger.logFileService(\n          `--------------------${moduleName}--------------------`\n        );\n        this.logger.logFileService(`\\nDownloading... ${configLink} `);\n        this.logger.logFileService(\n          `Config: ${JSON.stringify(originalModuleConfig, null, 2)} \\n`\n        );\n        return this.requestService.get(moduleLink, config.hash);\n      }),\n      switchMap(file =>\n        this.fileService.writeFile(\n          folder + moduleName,\n          'index.js',\n          moduleName,\n          file\n        )\n      ),\n      switchMap(() => this.requestService.get(moduleTypings, config.hash)),\n      switchMap(file =>\n        this.fileService.writeFile(\n          folder + `${this.defaultNamespaceFolder}/${isRegular}`,\n          'index.d.ts',\n          moduleName,\n          file\n        )\n      ),\n      tap(() => {\n        if (process.env.WRITE_FAKE_INDEX) {\n          this.writeFakeIndexIfMultiModule(folder, nameSpaceFakeIndex);\n        }\n      }),\n      switchMap(() => this.addNamespaceToTypeRoots(moduleName.split('/')[0])),\n      map(() => ({\n        provider: config.provider,\n        hash: config.hash,\n        version: originalModuleConfig.version,\n        name: originalModuleConfig.name,\n        dependencies: originalModuleConfig.dependencies,\n        packages: originalModuleConfig.packages\n      })),\n      tap(() => {\n        if (originalModuleConfig.packages.length) {\n          this.npmService.installPackages();\n        }\n      })\n    );\n  }\n\n  downloadTypings(\n    moduleLink: string,\n    folder: string,\n    fileName: string,\n    config: ExternalImporterConfig\n  ) {\n    if (!moduleLink) {\n      return of(true);\n    }\n    return this.requestService.get(moduleLink).pipe(\n      take(1),\n      map(res => {\n        this.logger.logFileService(`Done!`);\n        return res;\n      }),\n      switchMap(res =>\n        this.fileService.writeFile(\n          folder,\n          fileName,\n          config.typingsFileName,\n          res\n        )\n      )\n    );\n  }\n\n  importModule(\n    config: ExternalImporterConfig,\n    token: string,\n    { folderOverride, waitUntil } = {} as any\n  ): Promise<any> {\n    const timer$ = timer(waitUntil || 20 * 1000);\n    this.validateConfig(config);\n    if (this.isWeb()) {\n      SystemJS.config(\n        Object.assign(\n          {\n            map: {\n              [token]: config.link\n            }\n          },\n          config.SystemJsConfig\n        )\n      );\n      return SystemJS.import(config.link);\n    }\n    return new Observable(observer => {\n      const moduleName = config.fileName;\n      const moduleNamespace = config.namespace;\n      const moduleLink = config.link;\n      const moduleExtension = config.extension;\n      const moduleSystemJsConfig = config.SystemJsConfig || {};\n      const modulesFolder =\n        config.outputFolder || `/${this.defaultOutputFolder}/`;\n      const fileFullPath = `${folderOverride ||\n        process.cwd()}${modulesFolder}/${moduleNamespace}/${moduleName}.${moduleExtension}`;\n      const folder = `${folderOverride ||\n        process.cwd()}${modulesFolder}${moduleNamespace}`;\n      const fileName = `${moduleName}.${moduleExtension}`;\n\n      Object.assign(moduleSystemJsConfig, {\n        paths: { [moduleName]: fileFullPath, ...moduleSystemJsConfig.paths }\n      });\n\n      SystemJS.config(moduleSystemJsConfig);\n\n      if (this.fileService.isPresent(fileFullPath)) {\n        this.logger.logImporter(\n          `Bootstrap -> @Service('${moduleName}'): present inside .${modulesFolder}${moduleNamespace}/${moduleName}.${moduleExtension} folder and loaded from there`\n        );\n        this.importExternalModule(moduleName)\n          .pipe(take(1))\n          .subscribe(\n            m => {\n              observer.next(m);\n              observer.complete();\n            },\n            err => {\n              observer.error(err);\n              observer.complete();\n            }\n          );\n      } else {\n        this.logger.logImporter(\n          `Bootstrap -> @Service('${moduleName}'): will be downloaded inside .${modulesFolder}${moduleNamespace}/${moduleName}.${moduleExtension} folder and loaded from there`\n        );\n        this.logger.logImporter(\n          `Bootstrap -> @Service('${moduleName}'): ${moduleLink} downloading...`\n        );\n        this.requestService\n          .get(moduleLink)\n          .pipe(\n            take(1),\n            tap(() => this.logger.logImporter(`Done!`)),\n            switchMap(res =>\n              this.fileService.writeFile(folder, fileName, config.fileName, res)\n            ),\n            switchMap(() =>\n              this.downloadTypings(config.typings, folder, fileName, config)\n            ),\n            switchMap(() => this.importExternalModule(moduleName))\n          )\n          .subscribe(\n            m => {\n              observer.next(m);\n              observer.complete();\n            },\n            err => {\n              observer.error(err);\n              observer.complete();\n            }\n          );\n      }\n    })\n      .pipe(takeUntil(timer$))\n      .toPromise();\n  }\n}\n","import { Config } from './external-importer-systemjs';\n\nexport class ExternalImporterConfig {\n    link: string;\n    fileName?: string;\n    typings?: string;\n    typingsFileName?: string;\n    namespace?: string;\n    extension?: string;\n    crypto?: {\n        cyperKey: string;\n        cyperIv: string;\n        algorithm: string;\n    };\n    SystemJsConfig?: Config;\n    outputFolder?: string | '/node_modules/';\n}\n\nexport class ExternalImporterIpfsConfig {\n    provider: string;\n    hash: string;\n}\n\nexport interface NpmPackageConfig {\n    name: string;\n    version: string;\n}\n\nexport interface ExternalModuleConfiguration {\n    name: string;\n    version: string;\n    typings: string;\n    module: string;\n    dependencies?: Array<any>;\n    packages?: NpmPackageConfig[];\n}","export * from './external-importer';\nexport * from './external-importer-config';","import { Service } from '../../decorators/service/Service';\nimport { Observable } from 'rxjs';\n\n@Service()\nexport class LazyFactory {\n  lazyFactories: Map<any, any> = new Map();\n  setLazyFactory(\n    provide: string,\n    factory: Observable<Function> | Promise<Function>\n  ) {\n    this.lazyFactories.set(provide, factory);\n    return this.getLazyFactory(provide);\n  }\n  getLazyFactory(provide: string) {\n    return this.lazyFactories.get(provide);\n  }\n}\n","import { Service } from '../../../decorators/service/Service';\nimport {\n  DecoratorType,\n  ServiceArgumentsInternal\n} from '../../../decorators/module/module.interfaces';\n\n@Service()\nexport class ModuleValidators {\n  validateEmpty(m, original: ServiceArgumentsInternal, type: DecoratorType) {\n    if (!m) {\n      const requiredType = type.charAt(0).toUpperCase() + type.slice(1);\n      throw new Error(`\n            ${original.metadata.raw}\n            -> @Module: ${original.metadata.moduleName}\n            -> @Module hash: ${original.metadata.moduleHash}\n                --> Maybe you forgot to import some ${requiredType} inside ${\n        original.metadata.moduleName\n      } ?\n\n                Hint: run ts-lint again, looks like imported ${requiredType} is undefined or null inside ${\n        original.metadata.moduleName\n      }\n            `);\n    }\n  }\n\n  genericWrongPluggableError(\n    m,\n    original: ServiceArgumentsInternal,\n    type: DecoratorType\n  ) {\n    if (m.metadata.type !== type) {\n      const moduleType =\n        m.metadata.type.charAt(0).toUpperCase() + m.metadata.type.slice(1);\n      const requiredType = type.charAt(0).toUpperCase() + type.slice(1);\n      throw new Error(`\n            ${original.metadata.raw}\n            -> @Module: '${original.metadata.moduleName}'\n            -> @Module hash: '${original.metadata.moduleHash}'\n                --> @${moduleType} '${\n        m.metadata.moduleName\n      }' provided, where expected class decorated with '@${requiredType}' instead,\n            -> @Hint: please provide class with @Service decorator or remove ${\n              m.metadata.moduleName\n            } class\n            `);\n    }\n  }\n\n  validateImports(m, original: ServiceArgumentsInternal) {\n    if (m.metadata.type !== 'module') {\n      throw new Error(`\n            ${original.metadata.raw}\n            -> @Module: '${original.metadata.moduleName}'\n            -> @Module hash: '${original.metadata.moduleHash}'\n                --> @${m.metadata.type.charAt(0).toUpperCase() +\n                  m.metadata.type.slice(1)} '${\n        m.originalName\n      }' provided, where expected class decorated with '@Module' instead,\n            -> @Hint: please provide class with @Module decorator or remove ${\n              m.originalName\n            } from imports\n            `);\n    }\n  }\n\n  validateServices(m, original: ServiceArgumentsInternal) {\n    this.validateEmpty(m, original, 'service');\n    if (m.provide) {\n      return;\n    }\n    this.genericWrongPluggableError(m, original, 'service');\n  }\n\n  validatePlugin(m, original: ServiceArgumentsInternal) {\n    this.validateEmpty(m, original, 'plugin');\n    if (m.provide) {\n      return;\n    }\n    this.genericWrongPluggableError(m, original, 'plugin');\n  }\n\n  validateController(m, original: ServiceArgumentsInternal) {\n    this.validateEmpty(m, original, 'controller');\n    if (m.provide) {\n      return;\n    }\n    this.genericWrongPluggableError(m, original, 'controller');\n  }\n\n  validateEffect(m, original: ServiceArgumentsInternal) {\n    this.validateEmpty(m, original, 'effect');\n    if (m.provide) {\n      return;\n    }\n    this.genericWrongPluggableError(m, original, 'effect');\n  }\n\n  validateComponent(m, original: ServiceArgumentsInternal) {\n    this.validateEmpty(m, original, 'component');\n    if (m.provide) {\n      return;\n    }\n    this.genericWrongPluggableError(m, original, 'component');\n  }\n}\n","import { Service } from '../../decorators/service/Service';\nimport { BehaviorSubject } from 'rxjs';\nimport { ServiceArgumentsInternal } from '../../decorators/module/module.interfaces';\n\n@Service()\nexport class ControllersService {\n  private controllers: BehaviorSubject<\n    Array<ServiceArgumentsInternal>\n  > = new BehaviorSubject([]);\n\n  register(plugin) {\n    this.controllers.next([...this.controllers.getValue(), plugin]);\n  }\n\n  getControllers() {\n    return this.controllers.getValue();\n  }\n}\n","import { Service } from '../../decorators/service/Service';\nimport { BehaviorSubject } from 'rxjs';\nimport { ServiceArgumentsInternal } from '../../decorators/module/module.interfaces';\n\n@Service()\nexport class EffectsService {\n  private effects: BehaviorSubject<\n    Array<ServiceArgumentsInternal>\n  > = new BehaviorSubject([]);\n\n  register(plugin) {\n    this.effects.next([...this.effects.getValue(), plugin]);\n  }\n\n  getEffects() {\n    return this.effects.getValue();\n  }\n}\n","import { Service } from '../../decorators/service/Service';\nimport { BehaviorSubject } from 'rxjs';\nimport { ServiceArgumentsInternal } from '../../decorators/module/module.interfaces';\n\n@Service()\nexport class ComponentsService {\n  private components: BehaviorSubject<\n    Array<ServiceArgumentsInternal>\n  > = new BehaviorSubject([]);\n\n  register(plugin) {\n    this.components.next([...this.components.getValue(), plugin]);\n  }\n\n  getComponents() {\n    return this.components.getValue();\n  }\n}\n","import { Service } from '../../decorators/service/Service';\nimport { BehaviorSubject } from 'rxjs';\nimport { ServiceArgumentsInternal } from '../../decorators/module/module.interfaces';\n\n@Service()\nexport class BootstrapsServices {\n\n    private bootstraps: BehaviorSubject<Array<ServiceArgumentsInternal>> = new BehaviorSubject([]);\n\n    register(plugin) {\n        this.bootstraps.next([...this.bootstraps.getValue(), plugin]);\n    }\n\n    getBootstraps() {\n        return this.bootstraps.getValue();\n    }\n\n}","import { Service } from '../../decorators/service/Service';\nimport { BehaviorSubject } from 'rxjs';\nimport { ServiceArgumentsInternal } from '../../decorators/module/module.interfaces';\n\n@Service()\nexport class ServicesService {\n  private services: BehaviorSubject<\n    Array<ServiceArgumentsInternal>\n  > = new BehaviorSubject([]);\n\n  register(plugin) {\n    this.services.next([...this.services.getValue(), plugin]);\n  }\n\n  getServices() {\n    return this.services.getValue();\n  }\n}\n","import { of } from 'rxjs';\nimport { Container } from '../../container';\nimport { Service } from '../../decorators/service/Service';\nimport { LazyFactory } from '../lazy-factory/lazy-factory.service';\nimport { PluginService } from '../plugin/plugin.service';\nimport {\n  ServiceArgumentsInternal,\n  Metadata\n} from '../../decorators/module/module.interfaces';\nimport { ExternalImporter } from '../external-importer';\nimport { Injector } from '../../decorators/injector/injector.decorator';\nimport { ModuleValidators } from './helpers/validators';\nimport {\n  constructorWatcherService,\n  ConstructorWatcherService\n} from '../constructor-watcher/constructor-watcher';\nimport { ControllersService } from '../controllers/controllers.service';\nimport { EffectsService } from '../effect/effect.service';\nimport { ComponentsService } from '../components/components.service';\nimport { BootstrapsServices } from '../bootstraps/bootstraps.service';\nimport { ServicesService } from '../services/services.service';\nimport { CacheLayer, CacheLayerItem } from '../../services/cache/';\n\n@Service()\nexport class ModuleService {\n  public watcherService: ConstructorWatcherService = constructorWatcherService;\n\n  @Injector(LazyFactory) private lazyFactoryService: LazyFactory;\n  @Injector(PluginService) private pluginService: PluginService;\n  @Injector(ComponentsService) private componentsService: ComponentsService;\n  @Injector(ControllersService) private controllersService: ControllersService;\n  @Injector(EffectsService) private effectsService: EffectsService;\n  @Injector(BootstrapsServices) private bootstraps: BootstrapsServices;\n  @Injector(ExternalImporter) private externalImporter: ExternalImporter;\n  @Injector(ModuleValidators) private validators: ModuleValidators;\n  @Injector(ServicesService) private servicesService: ServicesService;\n\n  setServices(\n    services: ServiceArgumentsInternal[],\n    original: ServiceArgumentsInternal,\n    currentModule: CacheLayer<CacheLayerItem<Function>>\n  ) {\n    services.forEach(service => {\n      this.validators.validateServices(service, original);\n\n      this.setInjectedDependencies(service);\n\n      if (service.provide && service.provide.constructor === Function) {\n        service.provide = service.provide['name'];\n      }\n\n      if (service.provide && service.useFactory) {\n        this.setUseFactory(service);\n      } else if (service.provide && service.useDynamic) {\n        this.setUseDynamic(service);\n      } else if (\n        service.provide &&\n        service.useClass &&\n        service.useClass.constructor === Function\n      ) {\n        this.setUseClass(service);\n      } else if (service.provide && service.useValue) {\n        this.setUseValue(service);\n      } else {\n        currentModule.putItem({ data: <any>service, key: service.name });\n        this.servicesService.register(service);\n      }\n    });\n  }\n\n  setInjectedDependencies(service) {\n    service.deps = service.deps || [];\n    if (service.deps.length) {\n      service.deps = service.deps.map(dep => Container.get(dep));\n    }\n  }\n\n  setUseValue(service) {\n    Container.set(service.provide, service.useValue);\n    if (service.lazy) {\n      this.lazyFactoryService.setLazyFactory(\n        service.provide,\n        of(Container.get(service.provide))\n      );\n    }\n  }\n\n  setUseClass(service) {\n    if (service.lazy) {\n      this.lazyFactoryService.setLazyFactory(\n        service.provide,\n        of(Container.get(service.useClass))\n      );\n    } else {\n      Container.set(service.provide, Container.get(service.useClass));\n    }\n  }\n\n  setUseDynamic(service) {\n    const factory = this.externalImporter.importModule(\n      service.useDynamic,\n      service.provide\n    );\n    this.lazyFactoryService.setLazyFactory(service.provide, factory);\n  }\n\n  setUseFactory(service) {\n    const factory = service.useFactory;\n    service.useFactory = () => factory(...service.deps);\n    if (service.lazy) {\n      this.lazyFactoryService.setLazyFactory(\n        service.provide,\n        service.useFactory()\n      );\n    } else {\n      Container.set(service.provide, service.useFactory());\n    }\n  }\n\n  setControllers(\n    controllers: Function[],\n    original: ServiceArgumentsInternal,\n    currentModule: CacheLayer<CacheLayerItem<Function>>\n  ) {\n    controllers.forEach(controller => {\n      this.validators.validateController(controller, original);\n      currentModule.putItem({\n        data: controller,\n        key: controller.name\n      });\n      this.controllersService.register(controller);\n    });\n  }\n\n  setEffects(\n    effects: Function[],\n    original: ServiceArgumentsInternal,\n    currentModule: CacheLayer<CacheLayerItem<Function>>\n  ) {\n    effects.forEach(effect => {\n      this.validators.validateEffect(effect, original);\n      currentModule.putItem({\n        data: effect,\n        key: effect.name\n      });\n      this.effectsService.register(effect);\n    });\n  }\n\n  setComponents(\n    components: Function[],\n    original: ServiceArgumentsInternal,\n    currentModule: CacheLayer<CacheLayerItem<Function>>\n  ) {\n    components.forEach(component => {\n      this.validators.validateComponent(component, original);\n      currentModule.putItem({\n        data: component,\n        key: component.name\n      });\n      this.componentsService.register(component);\n    });\n  }\n\n  setPlugins(\n    plugins: Function[],\n    original: ServiceArgumentsInternal,\n    currentModule: CacheLayer<CacheLayerItem<Function>>\n  ) {\n    plugins.forEach(plugin => {\n      this.validators.validatePlugin(plugin, original);\n      currentModule.putItem({\n        data: plugin,\n        key: plugin.name\n      });\n      this.pluginService.register(plugin);\n    });\n  }\n\n  setBootstraps(\n    bootstraps: Function[],\n    original: ServiceArgumentsInternal,\n    currentModule: CacheLayer<CacheLayerItem<Function>>\n  ) {\n    bootstraps.forEach(bootstrap => {\n      this.validators.validateEmpty(\n        bootstrap,\n        original,\n        bootstrap['metadata']['type']\n      );\n      currentModule.putItem({\n        data: bootstrap,\n        key: bootstrap.name\n      });\n      this.bootstraps.register(bootstrap);\n    });\n  }\n\n  setAfterPlugins(\n    plugins: Function[],\n    original: ServiceArgumentsInternal,\n    currentModule: CacheLayer<CacheLayerItem<Function>>\n  ) {\n    plugins.forEach(plugin => {\n      this.validators.validatePlugin(plugin, original);\n      currentModule.putItem({\n        data: plugin,\n        key: plugin.name\n      });\n      this.pluginService.registerAfter(plugin);\n    });\n  }\n\n  setBeforePlugins(\n    plugins: Function[],\n    original: ServiceArgumentsInternal,\n    currentModule: CacheLayer<CacheLayerItem<Function>>\n  ) {\n    plugins.forEach(plugin => {\n      this.validators.validatePlugin(plugin, original);\n      currentModule.putItem({\n        data: plugin,\n        key: plugin.name\n      });\n      this.pluginService.registerBefore(plugin);\n    });\n  }\n\n  setImports(imports: Function[], original: ServiceArgumentsInternal) {\n    imports.forEach((m: any) => {\n      this.validators.validateImports(m, original);\n      if (!m) {\n        throw new Error('Missing import module');\n      } else {\n        Container.get(m);\n      }\n    });\n  }\n}\n","export * from './module.service';\nexport * from './helpers/validators';","import { Container } from '../../container';\nimport { CacheService } from '../cache/cache-layer.service';\nimport { InternalLayers, InternalEvents } from '../../helpers/events';\nimport { switchMap, filter, map } from 'rxjs/operators';\nimport { of, Observable } from 'rxjs';\nimport { BootstrapLogger } from '../bootstrap-logger/bootstrap-logger';\nimport { Injector } from '../../decorators/injector/injector.decorator';\nimport { Service } from '../../decorators/service/Service';\n\n@Service()\nexport class ResolverService {\n  @Injector(BootstrapLogger) private bootstrapLogger: BootstrapLogger;\n  @Injector(CacheService) private cacheService: CacheService;\n\n  resolveDependencies(hash, target, moduleName): Observable<any[]> {\n    this.cacheService\n      .getLayer(InternalLayers.modules)\n      .putItem({ key: hash, data: target });\n    const currentModule = this.cacheService.getLayer(hash);\n    currentModule.putItem({\n      key: InternalEvents.config,\n      data: { moduleName, moduleHash: hash }\n    });\n    return currentModule.getItemObservable(InternalEvents.load).pipe(\n      switchMap(config => {\n        if (!config.data) {\n          return of(null);\n        }\n        return currentModule.items.asObservable();\n      }),\n      filter(res => res && res.length),\n      map(this.resolveContainerDependencies(target, moduleName))\n    );\n  }\n\n  private resolveContainerDependencies(target, moduleName: string) {\n    return res => {\n      res.forEach(i => {\n        if (i.key === InternalEvents.load || i.key === InternalEvents.config) {\n          return;\n        }\n        const found = this.cacheService.searchForItem(i.data);\n        if (found) {\n          if (found.provide) {\n            return found;\n          }\n          const moduleType =\n            found.metadata.type.charAt(0).toUpperCase() +\n            found.metadata.type.slice(1);\n          this.bootstrapLogger.log(\n            `Start -> @Module('${moduleName}')${this.bootstrapLogger.logHashes(\n              `(${target.name})`\n            )}: @${moduleType}('${\n              found.originalName\n            }')${this.bootstrapLogger.logHashes(`(${found.name})`)}` +\n              ' initialized!'\n          );\n          return Container.get(found);\n        } else {\n          throw new Error('not found');\n        }\n      });\n      return res;\n    };\n  }\n}\n","export * from './resolver.service';\n","import { Service } from '../../decorators/service/Service';\nimport { Subject } from 'rxjs';\n\n@Service()\nexport class AfterStarterService {\n  appStarted: Subject<boolean> = new Subject();\n}\n","import { Container } from '../container/Container';\n\nexport const logExtendedInjectables = (\n  name: { name: string },\n  logExtendedInjectables: boolean\n) => {\n  if (Container.has(name) && logExtendedInjectables) {\n    console.log(\n      `Warn: Injection Token '${name.name ||\n        name}' is extended after it has being declared! ${JSON.stringify(\n        Container.get(name)\n      )}`\n    );\n  }\n};\n","import { of, combineLatest, from, Observable } from 'rxjs';\nimport { Container } from '../../container';\nimport { BootstrapLogger } from '../bootstrap-logger/bootstrap-logger';\nimport { CacheService } from '../cache/cache-layer.service';\nimport { InternalLayers, InternalEvents } from '../../helpers/events';\nimport { LazyFactory } from '../lazy-factory/lazy-factory.service';\nimport { ConfigService } from '../config/config.service';\nimport { PluginService } from '../plugin/plugin.service';\nimport { ConfigModel } from '../config/config.model';\nimport { take, map, switchMap, shareReplay } from 'rxjs/operators';\nimport { CacheLayer, CacheLayerItem } from '../cache/index';\nimport { EffectsService } from '../effect/effect.service';\nimport { ControllersService } from '../controllers/controllers.service';\nimport { ComponentsService } from '../components/components.service';\nimport { BootstrapsServices } from '../bootstraps/bootstraps.service';\nimport { ServicesService } from '../services/services.service';\nimport { AfterStarterService } from '../after-starter/after-starter.service';\nimport {\n  ServiceArgumentsInternal,\n  SystemIngridientsType\n} from '../../decorators/module/module.interfaces';\nimport { logExtendedInjectables } from '../../helpers/log';\nimport { Service } from '../../decorators/service/Service';\nimport { PluginInterface } from '../../decorators';\n\n@Service()\nexport class BootstrapService {\n  private globalConfig: CacheLayer<CacheLayerItem<ConfigModel>>;\n\n  constructor(\n    private logger: BootstrapLogger,\n    private cacheService: CacheService,\n    private lazyFactoriesService: LazyFactory,\n    public configService: ConfigService,\n    private controllersService: ControllersService,\n    private effectsService: EffectsService,\n    private pluginService: PluginService,\n    private componentsService: ComponentsService,\n    private bootstrapsService: BootstrapsServices,\n    private servicesService: ServicesService,\n    private afterStarterService: AfterStarterService\n  ) {\n    this.globalConfig = this.cacheService.createLayer<ConfigModel>({\n      name: InternalLayers.globalConfig\n    });\n  }\n\n  public start(app, config?: ConfigModel) {\n    this.configService.setConfig(config);\n    this.globalConfig.putItem({ key: InternalEvents.config, data: config });\n    Container.get(app);\n    const lazyFactoryKeys = Array.from(\n      this.lazyFactoriesService.lazyFactories.keys()\n    );\n    return of<string[]>(lazyFactoryKeys).pipe(\n      map(factories => this.prepareAsyncChainables(factories)),\n      switchMap(res =>\n        combineLatest(res).pipe(\n          take(1),\n          map(c => this.attachLazyLoadedChainables(lazyFactoryKeys, c)),\n          map(() => this.validateSystem()),\n          switchMap(() => combineLatest(this.asyncChainableControllers())),\n          switchMap(() =>\n            combineLatest(this.asyncChainablePluginsBeforeRegister())\n          ),\n          switchMap(() => combineLatest(this.asyncChainablePluginsRegister())),\n          switchMap(() =>\n            combineLatest(this.asyncChainablePluginsAfterRegister())\n          ),\n          switchMap(() => combineLatest(this.asyncChainableServices())),\n          switchMap(() => combineLatest(this.asyncChainableEffects())),\n          switchMap(() => combineLatest(this.asyncChainableComponents())),\n          map(() => this.loadApplication()),\n          switchMap(() => combineLatest(this.asyncChainableBootstraps())),\n          map(() => this.final())\n        )\n      )\n    );\n  }\n\n  private final(): Container {\n    this.afterStarterService.appStarted.next(true);\n    if (!this.configService.config.init) {\n      this.logger.log('Bootstrap -> press start!');\n    }\n    return Container;\n  }\n\n  private asyncChainableComponents() {\n    return [\n      of(true),\n      ...this.componentsService\n        .getComponents()\n        .filter(c => this.genericFilter(c, 'components'))\n        .map(async c => await Container.get(c))\n    ];\n  }\n\n  private asyncChainableBootstraps() {\n    return [\n      of(true),\n      ...this.bootstrapsService\n        .getBootstraps()\n        .map(async c => await Container.get(c))\n    ];\n  }\n\n  private asyncChainableEffects() {\n    return [\n      of(true),\n      ...this.effectsService\n        .getEffects()\n        .filter(c => this.genericFilter(c, 'effects'))\n        .map(async c => await Container.get(c))\n    ];\n  }\n\n  private asyncChainableServices() {\n    return [\n      of(true),\n      ...this.servicesService\n        .getServices()\n        .filter(c => this.genericFilter(c, 'services'))\n        .map(async c => await Container.get(c))\n    ];\n  }\n\n  private asyncChainableControllers() {\n    return [\n      of(true),\n      ...this.controllersService\n        .getControllers()\n        .filter(c => this.genericFilter(c, 'controllers'))\n        .map(async c => await Container.get(c))\n    ];\n  }\n\n  private asyncChainablePluginsRegister() {\n    return [\n      of(true),\n      ...this.pluginService\n        .getPlugins()\n        .filter(c => this.genericFilter(c, 'plugins'))\n        .map(async c => await this.registerPlugin(c))\n    ];\n  }\n\n  private asyncChainablePluginsAfterRegister() {\n    return [\n      of(true),\n      ...this.pluginService\n        .getAfterPlugins()\n        .filter(c => this.genericFilter(c, 'pluginsAfter'))\n        .map(async c => await this.registerPlugin(c))\n    ];\n  }\n\n  private asyncChainablePluginsBeforeRegister() {\n    return [\n      of(true),\n      ...this.pluginService\n        .getBeforePlugins()\n        .filter(c => this.genericFilter(c, 'pluginsBefore'))\n        .map(async c => await this.registerPlugin(c))\n    ];\n  }\n\n  private genericFilter(\n    c: ServiceArgumentsInternal,\n    name: SystemIngridientsType\n  ) {\n    return (\n      this.configService.config.initOptions[name] ||\n      (c.metadata.options && c.metadata.options['init']) ||\n      this.configService.config.init\n    );\n  }\n\n  private async registerPlugin(pluggable: ServiceArgumentsInternal) {\n    const plugin = Container.get<PluginInterface>(pluggable);\n    await plugin.register();\n    return plugin;\n  }\n\n  private prepareAsyncChainables(injectables: any[]) {\n    const asynChainables = [of(true)];\n    const injectableLog: {\n      [key: string]: { started: number; end: number };\n    } = {} as any;\n    const getName = n => n.name || n;\n    injectables.map(i => {\n      const date = Date.now();\n      injectableLog[getName(i)] = {\n        started: date,\n        end: null\n      };\n      this.logger.log(`Bootstrap -> @Service('${getName(i)}'): loading...`);\n      const somethingAsync = from(<Promise<any> | Observable<any>>(\n        this.lazyFactoriesService.getLazyFactory(i)\n      )).pipe(shareReplay(1));\n      asynChainables.push(somethingAsync);\n      somethingAsync.subscribe(() => {\n        this.logger.log(\n          `Bootstrap -> @Service('${getName(\n            i\n          )}'): loading finished after ${Date.now() -\n            injectableLog[getName(i)].started}ms !`\n        );\n        delete injectableLog[getName(i)];\n      });\n    });\n    return asynChainables;\n  }\n\n  private validateSystem() {\n    if (this.configService.config.strict) {\n      this.cacheService.searchForDuplicateDependenciesInsideApp();\n    }\n  }\n\n  private attachLazyLoadedChainables(res, chainables) {\n    // Remove first chainable unused observable\n    chainables.splice(0, 1);\n    let count = 0;\n    res.map(name => {\n      logExtendedInjectables(\n        name,\n        this.configService.config.experimental.logExtendedInjectables\n      );\n      Container.set(name, chainables[count++]);\n    });\n    return true;\n  }\n\n  loadApplication() {\n    Array.from(\n      this.cacheService.getLayer<Function>(InternalLayers.modules).map.keys()\n    ).forEach(m =>\n      this.cacheService.getLayer(m).putItem({\n        key: InternalEvents.load,\n        data: this.configService.config.init\n      })\n    );\n    return true;\n  }\n}\n","import { ExitHandlerService } from '../services/exit-handler/exit-handler.service';\nimport { Container } from '../container';\n\nexport const exitHandlerInit = () => {\n  const handler = Container.get(ExitHandlerService);\n  handler.init();\n\n  // do something when app is closing\n  process.on('exit', handler.exitHandler.bind(handler, { cleanup: true }));\n  // catches ctrl+c event\n  process.on('SIGINT', handler.exitHandler.bind(handler, { exit: true }));\n  // catches 'kill pid' (for example: nodemon restart)\n  process.on('SIGUSR1', handler.exitHandler.bind(handler, { exit: true }));\n  process.on('SIGUSR2', handler.exitHandler.bind(handler, { exit: true }));\n  // catches uncaught exceptions\n  process.on(\n    'uncaughtException',\n    handler.exitHandler.bind(handler, { exit: true })\n  );\n};\n","import 'reflect-metadata';\n\nimport { Container } from '../container';\nimport { BootstrapService } from '../services/bootstrap/bootstrap.service';\nimport { ConfigModel } from '../services/config/config.model';\nimport { exitHandlerInit } from './exit-handler';\nimport { Observable } from 'rxjs';\nimport { ModuleArguments } from '../decorators/module/module.interfaces';\n\nexitHandlerInit();\n\nconst bootstrapService = Container.get(BootstrapService);\n\nexport const Bootstrap = (app, config?: ConfigModel): Observable<Container> =>\n  bootstrapService.start(app, config);\nexport const BootstrapPromisify = (\n  app,\n  config?: ConfigModel\n): Promise<Container> => bootstrapService.start(app, config).toPromise();\nexport const BootstrapFramework = (\n  app,\n  modules: any[],\n  config?: ConfigModel\n): Observable<Container> => {\n  bootstrapService.configService.setConfig(config);\n  modules.map(m => Container.get(m));\n  return bootstrapService.start(app, config);\n};\n\nexport const setup = <T, K>(\n  options: ModuleArguments<T, K>,\n  frameworks: any[] = [],\n  bootstrapOptions?: ConfigModel\n) => {\n  const Module = require('../decorators/module/module.decorator').Module;\n\n  return BootstrapFramework(\n    Module({\n      imports: options.imports || [],\n      providers: options.providers || [],\n      services: options.services || [],\n      bootstrap: options.bootstrap || [],\n      components: options.components || [],\n      controllers: options.controllers || [],\n      effects: options.effects || [],\n      plugins: options.plugins || [],\n      afterPlugins: options.afterPlugins || [],\n      beforePlugins: options.beforePlugins || []\n    })(function() {}),\n    frameworks,\n    bootstrapOptions\n  );\n};\n\nexport const createTestBed = setup;\n","export * from './bootstrap';\nexport * from './create-unique-hash';\nexport * from './generic-constructor';\nexport * from './sha256';\n// export * from './testing';","import { Service } from '../../decorators/service/Service';\nimport { createUniqueHash } from '../../helpers';\n\n@Service()\nexport class MetadataService {\n  generateHashData(module, original) {\n    const services = module.services || [];\n    const imports = module.imports || [];\n    const fillMetadata = injectable => {\n      if (injectable && injectable['provide']) {\n        return injectable['provide'];\n      } else if (injectable) {\n        this.validateCustomInjectable(injectable, module, original);\n        return {\n          moduleName: injectable['metadata']['moduleName'],\n          hash: injectable['metadata']['moduleHash']\n        };\n      }\n    };\n    return [\n      [...services.map(i => fillMetadata(i))],\n      [...imports.map(i => fillMetadata(i))]\n    ];\n  }\n\n  validateCustomInjectableKeys(\n    keys: Array<\n      'useFactory' | 'provide' | 'useValue' | 'useClass' | 'useDynamic' | string\n    >\n  ) {\n    // keys.forEach(key => {\n    //     console.log('TOVA NE E SHEGA', key);\n    // });\n  }\n\n  validateCustomInjectable(injectable, module, original) {\n    if (!injectable['metadata'] && !injectable['provide']) {\n      throw new Error(`\n                ---- Wrong service ${JSON.stringify(\n                  injectable\n                )} provided inside '${original.name}' ----\n                @Module({\n                    services: ${JSON.stringify([\n                      ...module.services.filter(i => !i['metadata']),\n                      ...module.services\n                        .filter(\n                          i => i && i['metadata'] && i['metadata']['moduleName']\n                        )\n                        .map(i => i['metadata']['moduleName'])\n                    ])}\n                })\n                ${JSON.stringify(`${original}`, null, 2)}\n\n                Hint: System recieved Object but it is not with appropriate format you must provide object with following parameters:\n\n                YourObject: ${JSON.stringify(injectable)}\n\n                Option 1. [YourClass]\n\n                Option 2. [{provide: 'your-value', useClass: YourClass}]\n\n                Option 3. [{provide: 'your-value', deps: [YourClass], useFactory: (test: YourClass) => {}}]\n\n                Option 4. [{provide: 'your-value', useDynamic: {}}]\n\n                Option 5. [{provide: 'your-value', useValue: 'your-value'}]\n            `);\n    }\n  }\n\n  parseModuleTemplate(moduleName, generatedHashData, targetCurrentSymbol) {\n    return `\n            ---- @gapi module '${moduleName}' metadata----\n            @Module({\n                imports: ${JSON.stringify(generatedHashData[1], null, '\\t')},\n                services: ${JSON.stringify(generatedHashData[0], null, '\\t')}\n            })\n            ${JSON.stringify(targetCurrentSymbol, null, 2)}\n        `;\n  }\n\n  createUniqueHash(string: string) {\n    return createUniqueHash(string);\n  }\n}\n","export * from './metadata.service';","export * from './compression.service';","export * from './effect.service';","export * from './controllers.service';","export * from './components.service';","export * from './bootstraps.service';","export * from './services.service';","import { PluginService } from '../plugin/plugin.service';\nimport { ServiceArgumentsInternal } from '../../decorators/module/module.interfaces';\nimport { Service } from '../../decorators/service/Service';\n\n@Service()\nexport class PluginManager {\n  constructor(private pluginService: PluginService) {}\n\n  listPlugins(): Array<ServiceArgumentsInternal> {\n    return this.pluginService.getPlugins();\n  }\n\n  getPlugin(pluginClass: Function): ServiceArgumentsInternal {\n    return this.pluginService\n      .getPlugins()\n      .filter(p => p.name === pluginClass.name)[0];\n  }\n}\n","export * from './cache/index';\nexport * from './plugin/plugin.service';\nexport * from './bootstrap-logger/index';\nexport * from './exit-handler/index';\nexport * from './external-importer/index';\nexport * from './module/index';\nexport * from './resolver/index';\nexport * from './config/index';\nexport * from './metadata/index';\nexport * from './compression/index';\nexport * from './file/index';\nexport * from './constructor-watcher/index';\nexport * from './effect/index';\nexport * from './controllers/index';\nexport * from './components/index';\nexport * from './bootstraps/index';\nexport * from './services/index';\nexport * from './plugin-manager/plugin-manager';\nexport * from './after-starter/after-starter.service';","import { Container } from '../container';\nimport {\n  ModuleService,\n  BootstrapLogger,\n  CacheLayer,\n  CacheLayerItem\n} from '../services';\n\nconst moduleService = Container.get(ModuleService);\nconst bootstrapLogger = Container.get(BootstrapLogger);\n\nexport function GenericConstruct(\n  module: any,\n  original,\n  currentModule: CacheLayer<CacheLayerItem<Function>>\n) {\n  return function construct(constructor, args) {\n    if (!module) {\n      return new constructor();\n    }\n\n    if (module.imports) {\n      moduleService.setImports(module.imports, original);\n    }\n\n    if (module.services) {\n      moduleService.setServices(module.services, original, currentModule);\n    }\n\n    if (module.providers) {\n      moduleService.setServices(module.providers, original, currentModule);\n    }\n\n    if (module.controllers) {\n      moduleService.setControllers(module.controllers, original, currentModule);\n    }\n\n    if (module.effects) {\n      moduleService.setEffects(module.effects, original, currentModule);\n    }\n\n    if (module.components) {\n      moduleService.setComponents(module.components, original, currentModule);\n    }\n\n    if (module.beforePlugins) {\n      moduleService.setBeforePlugins(\n        module.beforePlugins,\n        original,\n        currentModule\n      );\n    }\n\n    if (module.plugins) {\n      moduleService.setPlugins(module.plugins, original, currentModule);\n    }\n\n    if (module.afterPlugins) {\n      moduleService.setAfterPlugins(\n        module.afterPlugins,\n        original,\n        currentModule\n      );\n    }\n\n    if (module.bootstrap) {\n      moduleService.setBootstraps(module.bootstrap, original, currentModule);\n    }\n\n    bootstrapLogger.log(\n      `Bootstrap -> @Module('${\n        constructor.originalName\n      }')${bootstrapLogger.logHashes(`(${constructor.name})`)}: finished!`\n    );\n\n    return Container.get(constructor);\n  };\n}\n","import { Container, ServiceMetadata } from '../../container';\nimport { CacheService } from '../../services/cache/cache-layer.service';\nimport { GenericConstruct } from '../../helpers/generic-constructor';\nimport { BootstrapLogger } from '../../services/bootstrap-logger/bootstrap-logger';\nimport { ResolverService } from '../../services/resolver/resolver.service';\nimport { ModuleArguments, ModuleWithServices, ServiceArgumentsInternal } from '../module/module.interfaces';\nimport { MetadataService } from '../../services/metadata/metadata.service';\nimport { ModuleService } from '../../services/module/module.service';\n\nconst bootstrapLogger = Container.get(BootstrapLogger);\nconst resolverService = Container.get(ResolverService);\nconst cacheService = Container.get(CacheService);\nconst metadataService = Container.get(MetadataService);\nconst moduleService = Container.get(ModuleService);\n\nexport function Module<T, K extends keyof T>(module?: ModuleArguments<T, K>): Function {\n    return (target: any) => {\n        module = module || {};\n        const original: ServiceArgumentsInternal = Object.assign(target);\n        const moduleName = target.name || target.constructor.name;\n        const generatedHashData = metadataService.generateHashData(module, original);\n        const uniqueModuleTemplate = metadataService.parseModuleTemplate(moduleName, generatedHashData, `${target}`);\n        const uniqueHashForClass = metadataService.createUniqueHash(uniqueModuleTemplate);\n\n        // console.log(`--------- ${moduleName} --------- Hash: ${uniqueHashForClass}---------`);\n        // console.log(uniqueModuleTemplate);\n\n        Object.defineProperty(original, 'originalName', { value: original.name || original.constructor.name, writable: false });\n        Object.defineProperty(original, 'name', { value: uniqueHashForClass, writable: true });\n\n        const currentModuleLayer = cacheService.createLayer<Function>({ name: uniqueHashForClass });\n\n        original.metadata = {\n            moduleName: original.originalName,\n            moduleHash: uniqueHashForClass,\n            options: null,\n            type: 'module',\n            raw: uniqueModuleTemplate\n        };\n\n        const constructorFunction: any = function (...args: any[]) {\n            bootstrapLogger.log(`Bootstrap -> @Module('${original.originalName}')${bootstrapLogger.logHashes(`(${original.name})`)}: loading...`);\n            return GenericConstruct(module, original, currentModuleLayer)(original, args);\n        };\n\n        Object.assign(constructorFunction, original);\n\n        resolverService.resolveDependencies(uniqueHashForClass, original, moduleName)\n            .subscribe(\n                () => bootstrapLogger.log(`Start -> @Module('${original.originalName}')${bootstrapLogger.logHashes(`(${original.name})`)}: loaded!`)\n            );\n\n        Object.getOwnPropertyNames(original)\n            .filter(prop => typeof original[prop] === 'function')\n            .map(descriptor => Object.defineProperty(constructorFunction, descriptor, {\n                configurable: true,\n                writable: true,\n                value: original[descriptor]\n            }));\n        if (original.forRoot) {\n            const originalForRoot = constructorFunction.forRoot;\n            constructorFunction.forRoot = function (...args: any) {\n                const result: ModuleWithServices = originalForRoot(...args);\n\n                if (!result) {\n                    throw new Error(`forRoot configuration inside ${constructorFunction.name} is returning undefined or null`);\n                }\n\n                if (result.frameworkImports) {\n                    moduleService.setImports(result.frameworkImports as any, original);\n                }\n\n                if (result.services) {\n                    moduleService.setServices(result.services as any, original, currentModuleLayer);\n                }\n\n                if (result.providers) {\n                    moduleService.setServices(result.providers as any, original, currentModuleLayer);\n                }\n\n                if (result.components) {\n                    moduleService.setComponents(result.components as any, original, currentModuleLayer);\n                }\n\n                if (result.effects) {\n                    moduleService.setEffects(result.effects as any, original, currentModuleLayer);\n                }\n\n                if (result.controllers) {\n                    moduleService.setControllers(result.controllers as any, original, currentModuleLayer);\n                }\n\n                if (result.beforePlugins) {\n                    moduleService.setBeforePlugins(result.beforePlugins as any, original, currentModuleLayer);\n                }\n\n                if (result.plugins) {\n                    moduleService.setPlugins(result.plugins as any, original, currentModuleLayer);\n                }\n\n                if (result.afterPlugins) {\n                    moduleService.setAfterPlugins(result.afterPlugins as any, original, currentModuleLayer);\n                }\n\n                /** @angular compatability */\n                if (result.ngModule) {\n                    return result.ngModule;\n                }\n\n                return result.module ? result.module : result;\n            };\n        }\n\n        const service: ServiceMetadata<T, K> = {\n            type: constructorFunction\n        };\n\n        Container.set(service);\n        return constructorFunction;\n    };\n}\n\n/** @angular module compatability */\nexport const NgModule = Module;","export * from './module.decorator';\nexport * from './module.interfaces';","export * from './injector.decorator';","import { Container } from '../../container';\nimport { ModuleService } from '../../services/module/module.service';\n\nexport function InjectSoft<T>(Service: Function): T {\n    return Container.get(ModuleService).watcherService.getByClass(<any>Service);\n}","export * from './inject-soft.decorator';","/**\n * Thrown when DI cannot inject value into property decorated by @Inject decorator.\n */\nexport class CannotInjectError extends Error {\n  name = 'ServiceNotFoundError';\n\n  constructor(target: Object, propertyName: string) {\n    super(\n      `Cannot inject value into '${\n        target.constructor.name\n      }.${propertyName}'. ` +\n        `Please make sure you setup reflect-metadata properly and you don't use interfaces without service tokens as injection value.`\n    );\n    Object.setPrototypeOf(this, CannotInjectError.prototype);\n  }\n}\n","import { Token } from '../container/Token';\nimport { CannotInjectError } from '../container/error/CannotInjectError';\nimport { TypeOrName } from '../container/types/type-or-name';\n\nexport const getIdentifier = (\n  typeOrName: TypeOrName,\n  target: Object,\n  propertyName: string\n) => {\n  let identifier: any;\n  if (typeof typeOrName === 'string') {\n    identifier = typeOrName;\n  } else if (typeOrName instanceof Token) {\n    identifier = typeOrName;\n  } else {\n    identifier = typeOrName();\n  }\n  if (identifier === Object) {\n    throw new CannotInjectError(target, propertyName);\n  }\n  return identifier;\n};\n\nexport const isClient = () => typeof window !== 'undefined' && typeof window.document !== 'undefined';\n","import { Container } from '../../container/Container';\nimport { Token } from '../../container/Token';\nimport { getIdentifier, isClient } from '../../helpers/get-identifier';\nimport { TypeOrName } from '../../container/types/type-or-name';\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function Inject(type?: (type?: any) => Function): Function;\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function Inject(serviceName?: string): Function;\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function Inject(token: Token<any>): Function;\n\nexport function Inject(fn: Function): Function;\n\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function Inject(typeOrName?: TypeOrName): Function {\n    return function (target: Object, propertyName: string, index?: number) {\n        if (isClient() && typeOrName && typeof typeOrName === 'function') {\n            Object.defineProperty(target, propertyName, {\n                get: () => Container.get(typeOrName as Function)\n            });\n            return;\n        }\n        if (!typeOrName)\n            typeOrName = () => (Reflect as any).getMetadata('design:type', target, propertyName);\n\n        Container.registerHandler({\n            object: target,\n            propertyName: propertyName,\n            index: index,\n            value: instance => instance.get(getIdentifier(typeOrName, target, propertyName))\n        });\n    };\n}\n","import { ReflectDecorator } from '../../helpers/reflect.decorator';\n\nexport function Controller<T>(options?: T | { init?: boolean }): Function {\n  return ReflectDecorator(options, { type: 'controller' });\n}\n","export * from './controller.decorator';","import { ReflectDecorator } from '../../helpers/reflect.decorator';\n\nexport function Effect(options?: {init?: boolean}): Function {\n    return ReflectDecorator<any, any>(options, { type: 'effect' });\n}","export * from './effect.decorator';","import { ReflectDecorator } from '../../helpers/reflect.decorator';\nexport interface PluginInterface {\n    name?: string;\n    version?: string;\n    register(server?, options?): void;\n    handler?(request, h);\n}\nexport function Plugin(options?: any): Function {\n    return ReflectDecorator(options, { type: 'plugin' });\n}","import { ReflectDecorator } from '../../helpers/reflect.decorator';\n\nexport function Component(options?: {\n  init?: boolean;\n}): Function {\n  return ReflectDecorator(options, { type: 'component' });\n}\n","export * from './component.decorator';","import { Container } from '../../container/Container';\nimport { Token } from '../../container/Token';\nimport { getIdentifier, isClient } from '../../helpers/get-identifier';\nimport { TypeOrName } from '../../container/types/type-or-name';\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function InjectMany(type?: (type?: any) => Function): Function;\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function InjectMany(serviceName?: string): Function;\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function InjectMany(token: Token<any>): Function;\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function InjectMany(\n  typeOrName?: TypeOrName\n): Function {\n  return function(target: Object, propertyName: string, index?: number) {\n    if (isClient() && typeOrName instanceof Token) {\n      Object.defineProperty(target, propertyName, {\n        get: () =>\n          Container.getMany(getIdentifier(typeOrName, target, propertyName))\n      });\n      return;\n    }\n    if (!typeOrName) {\n      typeOrName = () =>\n        (Reflect as any).getMetadata('design:type', target, propertyName);\n    }\n    Container.registerHandler({\n      object: target,\n      propertyName: propertyName,\n      index: index,\n      value: instance =>\n        instance.getMany(getIdentifier(typeOrName, target, propertyName))\n    });\n  };\n}\n","export * from './module/index';\nexport * from './injector/index';\nexport * from './inject-soft/index';\nexport * from './inject/Inject';\nexport * from './controller/index';\nexport * from './effect/index';\nexport * from './plugin/Plugin';\nexport * from './service/Service';\nexport * from './component/index';\nexport * from './inject-many/InjectMany';\nexport { Service as Injectable } from './service/Service';\n","import 'reflect-metadata';\n\nexport * from './container/index';\nexport * from './decorators/index';\nexport * from './helpers/index';\nexport * from './services/index';\n"]}