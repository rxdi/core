import { Observable } from 'rxjs';
import { BootstrapLogger } from '../bootstrap-logger/bootstrap-logger';
import { CacheService } from '../cache/cache-layer.service';
import { LazyFactory } from '../lazy-factory/lazy-factory.service';
import { ConfigService } from '../config/config.service';
import { PluginService } from '../plugin/plugin.service';
import { ConfigModel } from '../config/config.model';
import { CacheLayer, CacheLayerItem } from '../cache';
import { EffectsService } from '../effect/effect.service';
import { ControllersService } from '../controllers/controllers.service';
import { ComponentsService } from '../components/components.service';
import { BootstrapsServices } from '../bootstraps';
export declare class BootstrapService {
    private logger;
    private cacheService;
    private lazyFactoriesService;
    private configService;
    private controllersService;
    private effectsService;
    private pluginService;
    private componentsService;
    private bootstrapsService;
    globalConfig: CacheLayer<CacheLayerItem<ConfigModel>>;
    chainableObservable: Observable<boolean>;
    asyncChainables: Observable<any>[];
    constructor(logger: BootstrapLogger, cacheService: CacheService, lazyFactoriesService: LazyFactory, configService: ConfigService, controllersService: ControllersService, effectsService: EffectsService, pluginService: PluginService, componentsService: ComponentsService, bootstrapsService: BootstrapsServices);
    start(app: any, config?: ConfigModel): Observable<boolean>;
    private final(plugins);
    private asyncChainablePluginsRegister();
    private asyncChainableComponents();
    private asyncChainableBootstraps();
    private asyncChainableEffects();
    private asyncChainableControllers();
    private registerPlugin(pluggable);
    private asyncChainablePluginsAfterRegister();
    private asyncChainablePluginsBeforeRegister();
    filterInit(): (c: any) => any;
    private prepareAsyncChainables(injectable);
    private validateSystem();
    private attachLazyLoadedChainables(res, chainables);
    loadApplication(plugins: any): any;
}
